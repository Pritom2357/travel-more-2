{%- assign form_title = form_title | default: "Find Perfect Trip" -%}
{%- assign min_price = min_price | default: 500 -%}
{%- assign max_price = max_price | default: 5000 -%}

<div class="enhanced-booking-form px-4 py-4 rounded">
  <h3 class="mb-3 font-weight-bold">{{ form_title }}</h3>
  
  <div class="form-group position-relative">
    <label for="destinationInput">Where would you like to go?</label>
    <div class="input-group">
      <div class="input-group-prepend">
        <span class="input-group-text"><i class="bi bi-geo-alt"></i></span>
      </div>
      <input type="text" class="form-control" id="destinationInput" placeholder="Search destinations..." autocomplete="off">
      <div class="dropdown-menu destination-results w-100" id="destinationResults"></div>
    </div>
    
    <div class="popular-destinations mt-2">
      <small class="d-block text-muted mb-1">Popular destinations:</small>
      <div class="d-flex flex-wrap gap-1">
        {% for block in blocks %}
          {% if block.type == 'destination_block' and forloop.index <= 3 %}
            <span class="badge badge-pill destination-tag" data-value="{{ block.settings.destination_title }}">
              {{ block.settings.destination_title }}
            </span>
          {% endif %}
        {% endfor %}
      </div>
    </div>
  </div>
  
  <div class="form-group">
    <label>What type of trip?</label>
    <div class="trip-type-selector">
      <div class="trip-type-option" data-value="Adventure">
        <i class="bi bi-compass"></i>
        <span>Adventure</span>
      </div>
      <div class="trip-type-option" data-value="Family">
        <i class="bi bi-people"></i>
        <span>Family</span>
      </div>
      <div class="trip-type-option" data-value="Luxury">
        <i class="bi bi-star"></i>
        <span>Luxury</span>
      </div>
      <div class="trip-type-option" data-value="Honeymoon">
        <i class="bi bi-heart"></i>
        <span>Honeymoon</span>
      </div>
    </div>
    <input type="hidden" id="selectedTripType" value="">
  </div>
  
  <!-- When -->
  <div class="form-group">
    <label>When would you like to travel?</label>
    <div class="row">
      <div class="col-6">
        <select class="form-control" id="travelMonth">
          <option value="">Select month</option>
          <option value="Any time">Any time</option>
          <option value="January">January</option>
          <option value="February">February</option>
          <option value="March">March</option>
          <option value="April">April</option>
          <option value="May">May</option>
          <option value="June">June</option>
          <option value="July">July</option>
          <option value="August">August</option>
          <option value="September">September</option>
          <option value="October">October</option>
          <option value="November">November</option>
          <option value="December">December</option>
        </select>
      </div>
      <div class="col-6">
        <select class="form-control" id="travelDuration">
          <option value="">Duration</option>
          <option value="Weekend">Weekend</option>
          <option value="1 week">1 week</option>
          <option value="2 weeks">2 weeks</option>
          <option value="Longer">Longer</option>
        </select>
      </div>
    </div>
  </div>
  
  <!-- Budget Range with Visualization -->
  <div class="form-group">
    <label for="priceRange">
      Budget: <span id="budgetLabel">${{ min_price }} - ${{ max_price }}</span>
    </label>
    
    <div class="price-range-container">
      <div class="price-distribution">
        <div class="price-bar" style="height: 40%;" data-price-point="budget"></div>
        <div class="price-bar" style="height: 70%;" data-price-point="standard"></div>
        <div class="price-bar" style="height: 30%;" data-price-point="premium"></div>
        <div class="price-bar" style="height: 20%;" data-price-point="luxury"></div>
      </div>
      
      <input
        type="range"
        class="custom-range"
        id="priceRange"
        min="{{ min_price }}"
        max="{{ max_price }}"
        step="100"
        value="{{ min_price }}"
      >
      
      <div class="price-labels d-flex justify-content-between">
        <small>Budget</small>
        <small>Luxury</small>
      </div>
    </div>
  </div>
  
  <!-- Results Preview Area (initially hidden) -->
  <div class="results-preview mb-3" id="resultsPreview">
    <div class="results-count">
      <span id="matchCount">0</span> trips match your criteria
    </div>
    <div class="top-matches" id="topMatches">
      <!-- Dynamic content will be injected here -->
    </div>
  </div>
  
  <!-- Primary Action Buttons -->
  <div class="form-actions">
    <button class="btn btn-primary btn-block mb-2" id="searchToursBtn">
      <i class="bi bi-search"></i> Find Perfect Tours
    </button>
    <button class="btn btn-outline-primary btn-block" id="customRequestBtn" data-toggle="modal" data-target="#customTripModal">
      <i class="bi bi-stars"></i> Request Custom Trip
    </button>
  </div>
  
  <!-- Social Proof -->
  <div class="social-proof mt-3 text-center">
    <div class="d-flex align-items-center justify-content-center">
      <div class="booking-count">
        <i class="bi bi-check-circle-fill"></i>
        <span class="recent-bookings">37 bookings</span> in the last 24 hours
      </div>
    </div>
  </div>
  
  <!-- Quick Connect with a Specialist -->
  <div class="specialist-connect mt-3 d-flex align-items-center justify-content-center">
    <i class="bi bi-headset"></i>
    <a href="#" class="ml-2" id="specialistLink">Talk to a travel specialist</a>
  </div>
</div>

<!-- Custom Trip Request Modal -->
<div class="modal fade" id="customTripModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Create Your Dream Trip</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <form id="customTripForm">
          <div class="form-group">
            <label>Describe your ideal trip</label>
            <textarea class="form-control" rows="3" placeholder="E.g., Family trip to Thailand with elephant sanctuary visit, beach time, and local food experiences"></textarea>
          </div>
          <div class="row">
            <div class="col-md-6">
              <div class="form-group">
                <label>Preferred departure date</label>
                <input type="date" class="form-control">
              </div>
            </div>
            <div class="col-md-6">
              <div class="form-group">
                <label>Number of travelers</label>
                <select class="form-control">
                  <option>1 traveler</option>
                  <option>2 travelers</option>
                  <option>3-4 travelers</option>
                  <option>5+ travelers</option>
                </select>
              </div>
            </div>
          </div>
          <div class="form-group">
            <label>Your contact information</label>
            <div class="input-group mb-2">
              <div class="input-group-prepend">
                <span class="input-group-text"><i class="bi bi-envelope"></i></span>
              </div>
              <input type="email" class="form-control" placeholder="Email address">
            </div>
            <div class="input-group">
              <div class="input-group-prepend">
                <span class="input-group-text"><i class="bi bi-phone"></i></span>
              </div>
              <input type="tel" class="form-control" placeholder="Phone number (optional)">
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-primary">Submit Request</button>
      </div>
    </div>
  </div>
</div>

<style>
/* Enhanced Form Styling */
.enhanced-booking-form {
  background-color: rgba({{ form_red }}, {{ form_green }}, {{ form_blue }}, {{ form_bg_opacity }});
  color: {{ form_text_color }};
  padding: 1.75rem;
  border-radius: 0.5rem;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
  border: 1px solid rgba(255,255,255,0.1);
}

.enhanced-booking-form h3 {
  font-size: 1.5rem;
  margin-bottom: 1.25rem;
}

.destination-results {
  max-height: 250px;
  overflow-y: auto;
}

.destination-results .dropdown-item {
  padding: 10px 15px;
  border-bottom: 1px solid #eee;
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.destination-results .dropdown-item .destination-name {
  font-weight: 500;
}

.destination-results .dropdown-item .destination-meta {
  font-size: 12px;
  color: #666;
}

.popular-destinations .destination-tag {
  background-color: rgba(255, 255, 255, 0.2);
  color: inherit;
  cursor: pointer;
  transition: all 0.2s ease;
  margin-right: 5px;
  font-weight: normal;
}

.popular-destinations .destination-tag:hover {
  background-color: rgba(255, 255, 255, 0.4);
}

/* Trip Type Selector */
.trip-type-selector {
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
  margin-top: 8px;
}

.trip-type-option {
  flex-basis: calc(50% - 4px);
  text-align: center;
  padding: 12px 8px;
  border-radius: 8px;
  background-color: rgba(255, 255, 255, 0.1);
  cursor: pointer;
  transition: all 0.2s ease;
  display: flex;
  flex-direction: column;
  align-items: center;
}

.trip-type-option i {
  font-size: 1.5rem;
  margin-bottom: 5px;
}

.trip-type-option:hover {
  background-color: rgba(255, 255, 255, 0.2);
}

.trip-type-option.selected {
  background-color: rgba(68, 158, 237, 0.2);
  border: 1px solid rgb(68, 158, 237);
}

/* Price Range Styling */
.price-range-container {
  position: relative;
  padding-top: 25px;
  margin-bottom: 20px;
}

.price-distribution {
  position: absolute;
  top: 0;
  left: 10px;
  right: 10px;
  height: 25px;
  display: flex;
  justify-content: space-between;
  align-items: flex-end;
  gap: 5px;
}

.price-bar {
  flex: 1;
  background-color: rgba(68, 158, 237, 0.2);
  border-radius: 3px 3px 0 0;
}

.price-labels {
  margin-top: 5px;
  color: rgba(255, 255, 255, 0.7);
}

/* Results Preview */
.results-preview {
  background-color: rgba(255, 255, 255, 0.1);
  border-radius: 8px;
  padding: 12px;
  margin-top: 15px;
  margin-bottom: 15px;
  display: none;
}

.results-count {
  font-size: 0.875rem;
  margin-bottom: 10px;
}

.results-count #matchCount {
  font-weight: bold;
  color: rgb(68, 158, 237);
}

.top-matches {
  display: flex;
  gap: 10px;
  overflow-x: auto;
  padding-bottom: 5px;
}

.match-card {
  min-width: 120px;
  border-radius: 5px;
  overflow: hidden;
  background: rgba(255, 255, 255, 0.1);
}

.match-card img {
  width: 100%;
  height: 70px;
  object-fit: cover;
}

.match-card .match-info {
  padding: 5px;
  font-size: 0.75rem;
}

.match-card .match-title {
  font-weight: 500;
  margin-bottom: 2px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.match-card .match-price {
  font-size: 0.75rem;
}

/* Social Proof & Connections */
.social-proof {
  font-size: 0.75rem;
  color: rgba(255, 255, 255, 0.7);
}

.booking-count {
  display: inline-flex;
  align-items: center;
  gap: 5px;
}

.booking-count i {
  color: #28a745;
}

.recent-bookings {
  font-weight: bold;
}

.specialist-connect {
  font-size: 0.875rem;
  margin-top: 10px;
}

.specialist-connect i {
  color: rgb(68, 158, 237);
}

.specialist-connect a {
  color: inherit;
  text-decoration: underline;
}

/* Modal Styling */
#customTripModal .modal-content {
  border-radius: 10px;
}

#customTripModal .modal-header {
  border-bottom: none;
  padding-bottom: 0;
}

/* Responsive Adjustments */
@media (max-width: 767px) {
  .trip-type-selector {
    gap: 5px;
  }
  
  .trip-type-option {
    flex-basis: calc(50% - 5px);
    padding: 8px 5px;
    font-size: 0.875rem;
  }
  
  .trip-type-option i {
    font-size: 1.25rem;
  }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Variables to store selected values
  let selectedDestination = '';
  let selectedTripType = '';
  let selectedMonth = '';
  let selectedDuration = '';
  let selectedBudget = {{ min_price }};
  
  // Elements
  const destinationInput = document.getElementById('destinationInput');
  const destinationResults = document.getElementById('destinationResults');
  const tripTypeOptions = document.querySelectorAll('.trip-type-option');
  const tripTypeInput = document.getElementById('selectedTripType');
  const travelMonth = document.getElementById('travelMonth');
  const travelDuration = document.getElementById('travelDuration');
  const priceRange = document.getElementById('priceRange');
  const budgetLabel = document.getElementById('budgetLabel');
  const searchToursBtn = document.getElementById('searchToursBtn');
  const customRequestBtn = document.getElementById('customRequestBtn');
  const resultsPreview = document.getElementById('resultsPreview');
  const matchCount = document.getElementById('matchCount');
  const topMatches = document.getElementById('topMatches');
  const destinationTags = document.querySelectorAll('.destination-tag');
  
  // Initialize available destinations from blocks
  const availableDestinations = [
    {% for block in blocks %}
      {% if block.type == 'destination_block' %}
        {
          name: "{{ block.settings.destination_title }}",
          description: "{{ block.settings.destination_description | escape }}",
          price: {{ block.settings.unit_price }},
          type: "destination"
        },
      {% endif %}
    {% endfor %}
    // Add some example destinations
    {name: "Bali, Indonesia", description: "Island paradise with beaches and culture", price: 1200, type: "destination"},
    {name: "Santorini, Greece", description: "Stunning views and white architecture", price: 1800, type: "destination"},
    {name: "Kyoto, Japan", description: "Traditional culture and temples", price: 2200, type: "destination"},
    {name: "Safari in Kenya", description: "Wildlife adventure in Africa", price: 3000, type: "experience"},
    {name: "Northern Lights, Iceland", description: "Natural wonder experience", price: 2500, type: "experience"}
  ];
  
  // Destination search functionality
  destinationInput.addEventListener('input', function() {
    const searchTerm = this.value.toLowerCase();
    
    if (searchTerm.length < 2) {
      destinationResults.innerHTML = '';
      destinationResults.classList.remove('show');
      return;
    }
    
    const filteredResults = availableDestinations.filter(dest => 
      dest.name.toLowerCase().includes(searchTerm) || 
      dest.description.toLowerCase().includes(searchTerm)
    );
    
    renderDestinationResults(filteredResults);
  });
  
  destinationInput.addEventListener('focus', function() {
    if (this.value.length >= 2) {
      destinationResults.classList.add('show');
    }
  });
  
  // Popular destination tags
  destinationTags.forEach(tag => {
    tag.addEventListener('click', function() {
      const value = this.dataset.value;
      destinationInput.value = value;
      selectedDestination = value;
      updateResultsPreview();
    });
  });
  
  // Trip type selection
  tripTypeOptions.forEach(option => {
    option.addEventListener('click', function() {
      tripTypeOptions.forEach(o => o.classList.remove('selected'));
      this.classList.add('selected');
      selectedTripType = this.dataset.value;
      tripTypeInput.value = selectedTripType;
      updateResultsPreview();
    });
  });
  
  // Travel month and duration
  travelMonth.addEventListener('change', function() {
    selectedMonth = this.value;
    updateResultsPreview();
  });
  
  travelDuration.addEventListener('change', function() {
    selectedDuration = this.value;
    updateResultsPreview();
  });
  
  // Price range
  priceRange.addEventListener('input', function() {
    selectedBudget = this.value;
    budgetLabel.textContent = '$' + selectedBudget;
    updateResultsPreview();
  });
  
  // Handle searching
  searchToursBtn.addEventListener('click', function() {
    // Construct URL with all parameters
    const searchParams = new URLSearchParams();
    if (selectedDestination) searchParams.append('destination', selectedDestination);
    if (selectedTripType) searchParams.append('type', selectedTripType);
    if (selectedMonth) searchParams.append('month', selectedMonth);
    if (selectedDuration) searchParams.append('duration', selectedDuration);
    searchParams.append('budget', selectedBudget);
    
    // Redirect to collection page with filters
    window.location.href = '/collections/all?' + searchParams.toString();
  });
  
  // Helper function to render destination results
  function renderDestinationResults(results) {
    if (results.length === 0) {
      destinationResults.innerHTML = `
        <div class="dropdown-item">
          <div class="d-flex align-items-center">
            <i class="bi bi-search mr-2"></i>
            <span>No destinations found</span>
          </div>
          <button class="btn btn-sm btn-outline-secondary request-btn">Request It</button>
        </div>
      `;
    } else {
      destinationResults.innerHTML = results.map(dest => `
        <div class="dropdown-item destination-result" data-name="${dest.name}">
          <div>
            <div class="destination-name">${dest.name}</div>
            <div class="destination-meta">
              ${dest.type === 'experience' ? 'Experience' : 'Destination'} • From $${dest.price}
            </div>
          </div>
          <i class="bi bi-arrow-right"></i>
        </div>
      `).join('');
      
      // Add event listeners to results
      document.querySelectorAll('.destination-result').forEach(item => {
        item.addEventListener('click', function() {
          selectedDestination = this.dataset.name;
          destinationInput.value = selectedDestination;
          destinationResults.classList.remove('show');
          updateResultsPreview();
        });
      });
    }
    
    destinationResults.classList.add('show');
  }
  
  // Function to update results preview
  function updateResultsPreview() {
    // Only show preview if at least destination or trip type is selected
    if (!selectedDestination && !selectedTripType) {
      resultsPreview.style.display = 'none';
      return;
    }
    
    // Simple filtering logic
    let filteredResults = [...availableDestinations];
    
    if (selectedDestination) {
      filteredResults = filteredResults.filter(dest => 
        dest.name.toLowerCase().includes(selectedDestination.toLowerCase())
      );
    }
    
    // Display number of matches
    matchCount.textContent = filteredResults.length;
    
    // Display top 3 matches
    const topThreeMatches = filteredResults.slice(0, 3);
    
    if (topThreeMatches.length > 0) {
      topMatches.innerHTML = topThreeMatches.map(match => `
        <div class="match-card">
          <div class="match-img" style="height: 70px; background-color: #2c3e50;"></div>
          <div class="match-info">
            <div class="match-title">${match.name}</div>
            <div class="match-price">From $${match.price}</div>
          </div>
        </div>
      `).join('');
      
      resultsPreview.style.display = 'block';
    } else {
      resultsPreview.style.display = 'none';
    }
  }
  
  // Function to animate recent bookings count
  function animateBookingCount() {
    const bookingCountElement = document.querySelector('.recent-bookings');
    let count = 32;
    const maxCount = 40;
    const minCount = 35;
    
    setInterval(() => {
      count = Math.floor(Math.random() * (maxCount - minCount + 1)) + minCount;
      bookingCountElement.textContent = count + ' bookings';
    }, 30000); // Update every 30 seconds
  }
  
  animateBookingCount();
});
</script>