<!-- filepath: e:\travel more 2\snippets\product-card.liquid -->
{% assign card_style = card_style | default: 'standard' %}
{% assign card_layout = card_layout | default: 'classic' %}
{% assign animation_style = animation_style | default: 'fade' %}
{% assign enable_flip = enable_flip | default: false %}
{% assign enable_image_zoom = enable_image_zoom | default: true %}
{% assign enable_quick_view = enable_quick_view | default: true %}
{% assign enable_color_swatches = enable_color_swatches | default: true %}
{% assign enable_stock_level = enable_stock_level | default: false %}
{% assign enable_countdown = enable_countdown | default: false %}
{% assign enable_image_carousel = enable_image_carousel | default: true %}

<div class="col-lg-3 col-md-4 col-sm-6 mb-4 product-card-wrapper" 
     data-product-id="{{ product.id }}"
     data-card-style="{{ card_style }}"
     data-card-layout="{{ card_layout }}"
     data-animation="{{ animation_style }}">
  
  <div class="card h-100 product-card {{ card_style }}-style {{ card_layout }}-layout{% if enable_flip %} flip-enabled{% endif %}{% if animation_style %} animate-{{ animation_style }}{% endif %}"
       style="
         --card-bg-color: {{ card_bg_color | default: '#ffffff' }};
         --card-text-color: {{ card_text_color | default: '#333333' }};
         --card-accent-color: {{ card_accent_color | default: '#4a90e2' }};
         --card-sale-color: {{ card_sale_color | default: '#ff5252' }};
       ">
    
    {% if enable_flip %}
    <div class="card-inner">
      <div class="card-front">
    {% endif %}
    
    <!-- Card Image Section -->
    <div class="product-card-media{% if enable_image_zoom %} zoom-enabled{% endif %}">
      <a href="{{ product.url }}" class="image-link">
        {% if product.featured_image != blank %}
          {% if enable_image_carousel and product.images.size > 1 %}
          <div class="product-image-carousel">
            <div class="carousel-inner">
              {% for image in product.images limit: 4 %}
              <div class="carousel-item{% if forloop.first %} active{% endif %}">
                <div class="image-container{% if enable_image_zoom %} zoom-container{% endif %}">
                  <img
                    src="{{ image | img_url: 'medium' }}"
                    data-srcset="{{ image | img_url: '300x300' }} 300w,
                               {{ image | img_url: '400x400' }} 400w,
                               {{ image | img_url: '500x500' }} 500w"
                    sizes="(max-width: 767px) calc(100vw - 30px), (max-width: 991px) 300px, 400px"
                    class="card-img-top lazyload{% if forloop.first %} primary-img{% endif %}"
                    alt="{{ image.alt | escape | default: product.title }}"
                    loading="{{ forloop.first ? 'eager' : 'lazy' }}"
                    width="400"
                    height="400">
                </div>
              </div>
              {% endfor %}
            </div>
            {% if product.images.size > 1 %}
            <div class="carousel-controls">
              <span class="prev-slide" aria-label="Previous image"><svg width="10" height="15" viewBox="0 0 10 15"><path d="M9 1L2 7.5 9 14" stroke="currentColor" stroke-width="2" fill="none"/></svg></span>
              <span class="next-slide" aria-label="Next image"><svg width="10" height="15" viewBox="0 0 10 15"><path d="M1 1L8 7.5 1 14" stroke="currentColor" stroke-width="2" fill="none"/></svg></span>
            </div>
            {% endif %}
          </div>
          {% else %}
          <div class="image-container{% if enable_image_zoom %} zoom-container{% endif %}">
            <img
              src="{{ product.featured_image | img_url: 'medium' }}"
              data-srcset="{{ product.featured_image | img_url: '300x300' }} 300w,
                           {{ product.featured_image | img_url: '400x400' }} 400w,
                           {{ product.featured_image | img_url: '500x500' }} 500w"
              sizes="(max-width: 767px) calc(100vw - 30px), (max-width: 991px) 300px, 400px"
              class="card-img-top primary-img lazyload"
              alt="{{ product.featured_image.alt | escape | default: product.title }}"
              loading="eager"
              width="400"
              height="400">
            
            {% if product.images.size > 1 and show_second_img %}
              <img
                src="{{ product.images[1] | img_url: 'medium' }}"
                class="card-img-top secondary-img lazyload"
                alt="{{ product.images[1].alt | escape | default: product.title }}"
                loading="lazy"
                width="400"
                height="400">
            {% endif %}
          </div>
          {% endif %}
          
          <!-- Image Overlay for Hover Effects -->
          <div class="image-overlay">
            <div class="quick-actions">
              <!-- Quick view button -->
              {% if enable_quick_view %}
                <button type="button" class="btn-quick-action btn-quickview" data-product-url="{{ product.url }}?view=quick-view" aria-label="Quick view {{ product.title }}">
                  <span class="icon">
                    <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                      <path d="M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0z"/>
                      <path d="M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8zm8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7z"/>
                    </svg>
                  </span>
                  <span class="tooltip">Quick view</span>
                </button>
              {% endif %}
              
              <!-- Wishlist button -->
              {% if enable_wishlist %}
                <button type="button" class="btn-quick-action btn-wishlist" data-product-id="{{ product.id }}" aria-label="Add {{ product.title }} to wishlist">
                  <span class="icon">
                    <svg class="icon-wishlist" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                      <path d="m8 2.748-.717-.737C5.6.281 2.514.878 1.4 3.053c-.523 1.023-.641 2.5.314 4.385.92 1.815 2.834 3.989 6.286 6.357 3.452-2.368 5.365-4.542 6.286-6.357.955-1.886.838-3.362.314-4.385C13.486.878 10.4.28 8.717 2.01L8 2.748zM8 15C-7.333 4.868 3.279-3.04 7.824 1.143c.06.055.119.112.176.171a3.12 3.12 0 0 1 .176-.17C12.72-3.042 23.333 4.867 8 15z"/>
                    </svg>
                    <svg class="icon-wishlist-filled" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                      <path fill-rule="evenodd" d="M8 1.314C12.438-3.248 23.534 4.735 8 15-7.534 4.736 3.562-3.248 8 1.314z"/>
                    </svg>
                  </span>
                  <span class="tooltip">Add to wishlist</span>
                </button>
              {% endif %}
              
              <!-- Compare button -->
              {% if enable_compare %}
                <button type="button" class="btn-quick-action btn-compare" data-product-id="{{ product.id }}" aria-label="Compare {{ product.title }}">
                  <span class="icon">
                    <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                      <path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z"/>
                    </svg>
                  </span>
                  <span class="tooltip">Compare</span>
                </button>
              {% endif %}
              
              {% if enable_flip %}
                <button type="button" class="btn-quick-action btn-flip" aria-label="View more details">
                  <span class="icon">
                    <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                      <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                      <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z"/>
                    </svg>
                  </span>
                  <span class="tooltip">More details</span>
                </button>
              {% endif %}
            </div>
            
            {% if show_quick_add %}
              <div class="quick-add-container">
                {% if product.variants.size == 1 %}
                  <!-- Quick add to cart for single variant products -->
                  <button type="button" 
                          class="btn btn-quick-add" 
                          data-product-id="{{ product.id }}"
                          data-variant-id="{{ product.selected_or_first_available_variant.id }}"
                          {% unless product.available %}disabled{% endunless %}>
                    {% if product.available %}
                      {{ quick_add_text | default: 'Add to Cart' }}
                    {% else %}
                      {{ sold_out_text | default: 'Sold Out' }}
                    {% endif %}
                  </button>
                {% else %}
                  <!-- View options for multi-variant products -->
                  <a href="{{ product.url }}" class="btn btn-options">
                    {{ view_options_text | default: 'View Options' }}
                  </a>
                {% endif %}
              </div>
            {% endif %}
          </div>
        {% else %}
          <!-- Placeholder for products without images -->
          <div class="product-placeholder">
            {{ product.title | truncate: 2 }}
          </div>
        {% endif %}
      </a>
      
      <!-- Product Badges -->
      <div class="product-badges badge-position-{{ badge_position | default: 'top-left' }}">
        {% if enable_custom_badges and product.metafields.custom.badge != blank %}
          <span class="badge badge-custom" style="background-color: {{ product.metafields.custom.badge_color | default: card_accent_color }};">
            {{ product.metafields.custom.badge }}
          </span>
        {% else %}
          {% if product.tags contains 'new' %}
            <span class="badge badge-new">{{ new_badge_text | default: 'New' }}</span>
          {% endif %}
          
          {% if product.compare_at_price > product.price %}
            {% assign discount_amount = product.compare_at_price | minus: product.price %}
            {% assign discount_percentage = discount_amount | times: 100 | divided_by: product.compare_at_price %}
            <span class="badge badge-sale">{{ sale_badge_text | default: 'Sale' }} {{ discount_percentage }}%</span>
          {% endif %}
          
          {% if product.available == false %}
            <span class="badge badge-soldout">{{ soldout_badge_text | default: 'Sold Out' }}</span>
          {% endif %}
          
          {% if product.tags contains 'limited' or product.tags contains 'best-seller' %}
            <span class="badge badge-featured">{{ product.tags | where: "limited, best-seller" | first }}</span>
          {% endif %}
        {% endif %}
      </div>
      
      {% if enable_countdown and product.tags contains 'sale_ends_' %}
        {% assign sale_end_tag = product.tags | where: "sale_ends_" | first %}
        {% if sale_end_tag %}
          {% assign sale_end_date = sale_end_tag | remove: 'sale_ends_' | split: '_' %}
          {% if sale_end_date.size == 3 %}
            {% capture end_date %}{{ sale_end_date[0] }}/{{ sale_end_date[1] }}/{{ sale_end_date[2] }}{% endcapture %}
            <div class="sale-countdown" data-end-date="{{ end_date }}">
              <div class="countdown-label">Sale ends in:</div>
              <div class="countdown-timer">
                <span class="days">00</span>:<span class="hours">00</span>:<span class="minutes">00</span>:<span class="seconds">00</span>
              </div>
            </div>
          {% endif %}
        {% endif %}
      {% endif %}
    </div>
    
    <!-- Card Body -->
    <div class="card-body d-flex flex-column">
      <!-- Product Vendor -->
      {% if show_vendor and product.vendor %}
        <div class="product-vendor">
          <span class="text-uppercase vendor-name">{{ product.vendor }}</span>
        </div>
      {% endif %}
      
      <!-- Product Title -->
      <h3 class="card-title">
        <a href="{{ product.url }}" class="product-title-link">
          {{ product.title }}
        </a>
      </h3>
      
      <!-- Product Rating -->
      {% if show_rating %}
        <div class="product-rating">
          {% if product.metafields.reviews.rating %}
            <div class="stars-outer">
              <div class="stars-inner" style="width: {{ product.metafields.reviews.rating.value | times: 20 }}%;"></div>
            </div>
            <span class="rating-count">({{ product.metafields.reviews.rating_count }})</span>
          {% endif %}
        </div>
      {% endif %}
      
      <!-- Color/Variant Swatches (for products with color/size options) -->
      {% if enable_color_swatches and product.variants.size > 1 and product.options_by_name contains 'Color' %}
        <div class="product-swatches">
          <div class="swatch-label">{{ swatch_label | default: 'Colors' }}:</div>
          <div class="swatch-options">
            {% assign option = product.options_by_name['Color'] %}
            {% assign unique_values = product.variants | map: 'option1' | uniq %}
            {% assign option_index = 0 %}
            {% for option in product.options %}
              {% if option == 'Color' %}
                {% assign option_index = forloop.index0 %}
                {% break %}
              {% endif %}
            {% endfor %}
            
            {% assign unique_values = product.variants | map: option_index | uniq %}
            
            {% for value in unique_values limit: 4 %}
              {% assign variant = product.variants | where: option_index, value | first %}
              {% if variant %}
                <a href="{{ variant.url }}" class="color-swatch" 
                   style="background-color: {{ value | replace: ' ', '' | downcase }}; {% if value contains '#' %}background-color: {{ value }};{% endif %}" 
                   title="{{ value }}" 
                   data-variant-id="{{ variant.id }}"></a>
              {% endif %}
            {% endfor %}
            
            {% if unique_values.size > 4 %}
              <span class="more-options">+{{ unique_values.size | minus: 4 }}</span>
            {% endif %}
          </div>
        </div>
      {% endif %}
      
      <!-- Product Price -->
      <div class="product-price mt-auto">
        {% render 'price', product: product, show_compare_at: true %}
      </div>
      
      <!-- Stock Level Indicator -->
      {% if enable_stock_level and product.variants.first.inventory_management == 'shopify' %}
        {% assign inventory_quantity = product.variants.first.inventory_quantity %}
        {% assign inventory_threshold = 10 %}
        
        {% if inventory_quantity <= inventory_threshold %}
          <div class="stock-level-container">
            <div class="stock-level-bar">
              <div class="stock-level-indicator" style="width: {{ inventory_quantity | times: 10 }}%"></div>
            </div>
            <div class="stock-level-text">
              {% if inventory_quantity <= 3 %}
                <span class="stock-critical">Only {{ inventory_quantity }} left!</span>
              {% else %}
                <span class="stock-low">{{ inventory_quantity }} in stock</span>
              {% endif %}
            </div>
          </div>
        {% endif %}
      {% endif %}
      
      <!-- Product Description - Optional Short Summary -->
      {% if show_description %}
        <div class="product-description">
          {{ product.description | strip_html | truncatewords: 15 }}
        </div>
      {% endif %}
    </div>
    
    <!-- Card Footer -->
    <div class="card-footer bg-transparent">
      <div class="d-flex product-actions">
        <a href="{{ product.url }}" class="btn btn-view-details">
          {{ view_details_text | default: 'View Details' }}
        </a>
        
        {% if show_add_to_cart and product.available and product.variants.size == 1 %}
          <button type="button" 
                  class="btn btn-add-to-cart" 
                  data-product-id="{{ product.id }}"
                  data-variant-id="{{ product.selected_or_first_available_variant.id }}">
            <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
              <path d="M9 5.5a.5.5 0 0 0-1 0V7H6.5a.5.5 0 0 0 0 1H8v1.5a.5.5 0 0 0 1 0V8h1.5a.5.5 0 0 0 0-1H9V5.5z"/>
              <path d="M.5 1a.5.5 0 0 0 0 1h1.11l.401 1.607 1.498 7.985A.5.5 0 0 0 4 12h1a2 2 0 1 0 0 4 2 2 0 0 0 0-4h7a2 2 0 1 0 0 4 2 2 0 0 0 0-4h1a.5.5 0 0 0 .491-.408l1.5-8A.5.5 0 0 0 14.5 3H2.89l-.405-1.621A.5.5 0 0 0 2 1H.5zm3.915 10L3.102 4h10.796l-1.313 7h-8.17zM6 14a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm7 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0z"/>
            </svg>
          </button>
        {% endif %}
      </div>
    </div>
    
    <!-- Tour-specific details -->
    {% if product.type contains 'Tour' or product.tags contains 'tour' or product.tags contains 'destination:' %}
      {% include 'extract-tour-data' with product %}
      <div class="tour-details">
        {% if tour_destination %}
          <div class="tour-detail">
            <span class="icon">📍</span>
            <span class="text">{{ tour_destination }}</span>
          </div>
        {% endif %}
        
        {% if tour_duration %}
          <div class="tour-detail">
            <span class="icon">⏱</span>
            <span class="text">{{ tour_duration }}</span>
          </div>
        {% endif %}
        
        {% if tour_group_size %}
          <div class="tour-detail">
            <span class="icon">👥</span>
            <span class="text">{{ tour_group_size }}</span>
          </div>
        {% endif %}
      </div>
    {% endif %}
    
    {% if enable_flip %}
      </div> <!-- End of card-front -->
      
      <!-- Card Back (Displays on Flip) -->
      <div class="card-back">
        <div class="card-back-content">
          <h3>{{ product.title }}</h3>
          
          <!-- Extended description -->
          <div class="extended-description">
            {{ product.description | strip_html | truncatewords: 50 }}
          </div>
          
          <!-- Specifications/Features -->
          <div class="product-specs">
            {% for tag in product.tags %}
              {% if tag contains 'spec:' %}
                {% assign spec = tag | remove: 'spec:' | split: ':' %}
                {% if spec.size == 2 %}
                  <div class="spec-item">
                    <span class="spec-label">{{ spec[0] }}:</span>
                    <span class="spec-value">{{ spec[1] }}</span>
                  </div>
                {% endif %}
              {% endif %}
            {% endfor %}
          </div>
          
          <div class="card-back-footer">
            <a href="{{ product.url }}" class="btn btn-view-full">
              {{ view_full_details_text | default: 'View Full Details' }}
            </a>
            <button type="button" class="btn-flip-back">
              <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                <path fill-rule="evenodd" d="M8 3a5 5 0 1 0 4.546 2.914.5.5 0 0 1 .908-.417A6 6 0 1 1 8 2v1z"/>
                <path d="M8 4.466V.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L8.41 4.658A.25.25 0 0 1 8 4.466z"/>
              </svg>
              Back
            </button>
          </div>
        </div>
      </div>
    </div> <!-- End of card-inner -->
    {% endif %}
    
  </div>
</div>

<style>
  /* Enhanced Product Card Styles */
  .product-card-wrapper {
    transition: transform 0.3s ease;
  }
  
  .product-card {
    position: relative;
    border: none;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 5px 15px rgba(0,0,0,0.08);
    transition: all 0.3s cubic-bezier(0.165, 0.84, 0.44, 1);
    background-color: var(--card-bg-color, #ffffff);
    color: var(--card-text-color, #333333);
    height: 100%;
  }
  
  /* Card Hover Effects */
  .product-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 15px 30px rgba(0,0,0,0.15);
  }
  
  /* Image Container Styling */
  .product-card-media {
    position: relative;
    overflow: hidden;
    padding-top: 100%; /* 1:1 Aspect Ratio */
  }
  
  .image-container {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
  
  .card-img-top {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.6s ease;
  }
  
  .secondary-img {
    opacity: 0;
    transition: opacity 0.4s ease;
  }
  
  .product-card:hover .primary-img {
    transform: scale(1.08);
  }
  
  .product-card:hover .secondary-img {
    opacity: 1;
  }
  
  /* Product Image Carousel */
  .product-image-carousel {
    position: relative;
    width: 100%;
    height: 100%;
  }
  
  .carousel-inner {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
  
  .carousel-item {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
    transition: opacity 0.5s ease;
    z-index: 1;
  }
  
  .carousel-item.active {
    opacity: 1;
    z-index: 2;
  }
  
  .carousel-controls {
    position: absolute;
    bottom: 15px;
    left: 0;
    width: 100%;
    display: flex;
    justify-content: center;
    gap: 10px;
    z-index: 10;
  }
  
  .prev-slide,
  .next-slide {
    width: 30px;
    height: 30px;
    background: rgba(255, 255, 255, 0.7);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s ease;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
  }
  
  .prev-slide:hover,
  .next-slide:hover {
    background: white;
    transform: translateY(-2px);
  }
  
  /* Image Zoom Effect */
  .zoom-container {
    overflow: hidden;
  }
  
  .zoom-enabled .zoom-container:after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line><line x1="11" y1="8" x2="11" y2="14"></line><line x1="8" y1="11" x2="14" y2="11"></line></svg>');
    background-repeat: no-repeat;
    background-position: top 10px right 10px;
    background-size: 20px;
    opacity: 0;
    transition: opacity 0.3s ease;
    pointer-events: none;
  }
  
  .zoom-enabled:hover .zoom-container:after {
    opacity: 1;
  }
  
  /* Product Placeholder */
  .product-placeholder {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #f8f9fa;
    color: #adb5bd;
    font-size: 2rem;
    font-weight: bold;
  }
  
  /* Image Overlay */
  .image-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(to bottom, rgba(0,0,0,0.1) 0%, rgba(0,0,0,0.3) 100%);
    opacity: 0;
    transition: opacity 0.3s ease;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    padding: 15px;
  }
  
  .product-card:hover .image-overlay {
    opacity: 1;
  }
  
  /* Quick Actions */
  .quick-actions {
    display: flex;
    gap: 10px;
    justify-content: flex-end;
  }
  
  .btn-quick-action {
    width: 35px;
    height: 35px;
    border-radius: 50%;
    background: white;
    border: none;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transform: translateY(-10px);
    opacity: 0;
    transition: all 0.3s ease;
    color: #333;
    box-shadow: 0 2px 5px rgba(0,0,0,0.2);
    position: relative;
  }
  
  .product-card:hover .btn-quick-action {
    transform: translateY(0);
    opacity: 1;
  }
  
  .btn-quick-action:nth-child(2) {
    transition-delay: 0.05s;
  }
  
  .btn-quick-action:nth-child(3) {
    transition-delay: 0.1s;
  }
  
  .btn-quick-action:nth-child(4) {
    transition-delay: 0.15s;
  }
  
  .btn-quick-action:hover {
    background-color: var(--card-accent-color, #4a90e2);
    color: white;
  }
  
  .btn-quick-action .tooltip {
    position: absolute;
    top: -30px;
    left: 50%;
    transform: translateX(-50%);
    background: rgba(0,0,0,0.7);
    color: white;
    padding: 3px 8px;
    border-radius: 4px;
    font-size: 11px;
    white-space: nowrap;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease, visibility 0.3s ease;
  }
  
  .btn-quick-action:hover .tooltip {
    opacity: 1;
    visibility: visible;
  }
  
  .icon-wishlist-filled {
    display: none;
  }
  
  .btn-wishlist.active .icon-wishlist {
    display: none;
  }
  
  .btn-wishlist.active .icon-wishlist-filled {
    display: inline-block;
    color: #e53935;
  }
  
  /* Quick Add */
  .quick-add-container {
    width: 100%;
    transform: translateY(10px);
    opacity: 0;
    transition: all 0.3s ease;
  }
  
  .product-card:hover .quick-add-container {
    transform: translateY(0);
    opacity: 1;
  }
  
  .btn-quick-add, .btn-options {
    width: 100%;
    border: none;
    border-radius: 4px;
    padding: 8px 12px;
    background-color: var(--card-accent-color, #4a90e2);
    color: white;
    font-weight: 600;
    font-size: 0.9rem;
    transition: all 0.2s ease;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    position: relative;
    overflow: hidden;
  }
  
  .btn-quick-add:before, .btn-options:before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
    transition: all 0.6s ease;
  }
  
  .btn-quick-add:hover:before, .btn-options:hover:before {
    left: 100%;
  }
  
  .btn-quick-add:hover, .btn-options:hover {
    background-color: var(--card-accent-color, #4a90e2);
    filter: brightness(1.1);
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
  }
  
  .btn-quick-add:disabled {
    background-color: #ccc;
    cursor: not-allowed;
  }
  
  /* Badges */
  .product-badges {
    position: absolute;
    display: flex;
    flex-direction: column;
    gap: 5px;
    z-index: 2;
  }
  
  .badge-position-top-left {
    top: 10px;
    left: 10px;
  }
  
  .badge-position-top-right {
    top: 10px;
    right: 10px;
  }
  
  .badge-position-bottom-left {
    bottom: 10px;
    left: 10px;
  }
  
  .badge-position-bottom-right {
    bottom: 10px;
    right: 10px;
  }
  
  .badge {
    padding: 6px 10px;
    border-radius: 4px;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }
  
  .badge-new {
    background-color: #4caf50;
    color: white;
  }
  
  .badge-sale {
    background-color: var(--card-sale-color, #ff5252);
    color: white;
  }
  
  .badge-soldout {
    background-color: #9e9e9e;
    color: white;
  }
  
  .badge-featured {
    background-color: #ff9800;
    color: white;
  }
  
  .badge-custom {
    color: white;
  }
  
  /* Sale Countdown */
  .sale-countdown {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    background-color: rgba(0,0,0,0.7);
    color: white;
    padding: 5px 10px;
    text-align: center;
    z-index: 5;
  }
  
  .countdown-label {
    font-size: 0.8rem;
    opacity: 0.9;
    margin-bottom: 3px;
  }
  
  .countdown-timer {
    font-weight: 700;
    font-size: 0.9rem;
    display: flex;
    justify-content: center;
    gap: 5px;
  }
  
  .countdown-timer span {
    background-color: rgba(255,255,255,0.2);
    padding: 2px 4px;
    border-radius: 3px;
    min-width: 24px;
    display: inline-block;
  }
  
  /* Card Body */
  .card-body {
    padding: 20px;
  }
  
  .product-vendor {
    margin-bottom: 5px;
  }
  
  .vendor-name {
    font-size: 0.8rem;
    color: #6c757d;
    letter-spacing: 0.5px;
  }
  
  .card-title {
    font-size: 1rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
    line-height: 1.4;
  }
  
  .product-title-link {
    color: var(--card-text-color, #333333);
    text-decoration: none;
    transition: color 0.2s ease;
  }
  
  .product-title-link:hover {
    color: var(--card-accent-color, #4a90e2);
  }
  
  /* Rating Stars */
  .product-rating {
    margin-bottom: 10px;
    display: flex;
    align-items: center;
  }
  
  .stars-outer {
    position: relative;
    display: inline-block;
  }
  
  .stars-outer::before {
    content: "★★★★★";
    color: #ddd;
  }
  
  .stars-inner {
    position: absolute;
    top: 0;
    left: 0;
    white-space: nowrap;
    overflow: hidden;
    width: 0;
  }
  
  .stars-inner::before {
    content: "★★★★★";
    color: #ffc107;
  }
  
  .rating-count {
    margin-left: 5px;
    font-size: 0.8rem;
    color: #6c757d;
  }
  
  /* Color Swatches */
  .product-swatches {
    margin: 10px 0;
    display: flex;
    align-items: center;
  }
  
  .swatch-label {
    font-size: 0.8rem;
    color: #6c757d;
    margin-right: 10px;
  }
  
  .swatch-options {
    display: flex;
    gap: 5px;
    flex-wrap: wrap;
  }
  
  .color-swatch {
    width: 20px;
    height: 20px;
    border-radius: 50%;
    border: 1px solid #e0e0e0;
    cursor: pointer;
    transition: transform 0.2s ease;
    position: relative;
  }
  
  .color-swatch:hover {
    transform: scale(1.2);
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
  }
  
  .color-swatch.active {
    box-shadow: 0 0 0 2px var(--card-accent-color, #4a90e2);
  }
  
  .more-options {
    font-size: 0.8rem;
    color: #6c757d;
    align-self: center;
    padding-left: 5px;
  }
  
  /* Stock Level Indicator */
  .stock-level-container {
    margin: 10px 0;
  }
  
  .stock-level-bar {
    background-color: #f0f0f0;
    height: 5px;
    border-radius: 10px;
    margin-bottom: 5px;
    overflow: hidden;
  }
  
  .stock-level-indicator {
    height: 100%;
    background-color: var(--card-accent-color, #4a90e2);
    border-radius: 10px;
  }
  
  .stock-level-text {
    font-size: 0.8rem;
    text-align: right;
  }
  
  .stock-critical {
    color: #f44336;
    font-weight: 600;
  }
  
  .stock-low {
    color: #ff9800;
  }
  
  /* Product Price */
  .product-price {
    font-weight: 700;
    font-size: 1.1rem;
    color: var(--card-text-color, #333333);
  }
  
  .compare-price {
    color: #9e9e9e;
    text-decoration: line-through;
    font-size: 0.9rem;
    margin-left: 5px;
  }
  
  /* Product Description */
  .product-description {
    margin-top: 10px;
    font-size: 0.85rem;
    color: #6c757d;
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
  }
  
  /* Card Footer */
  .card-footer {
    padding: 15px 20px 20px;
    border-top: none;
  }
  
  .product-actions {
    gap: 10px;
  }
  
  .btn-view-details {
    flex: 1;
    background-color: var(--card-accent-color, #4a90e2);
    color: white;
    border: none;
    border-radius: 4px;
    padding: 8px 15px;
    font-weight: 600;
    transition: all 0.2s ease;
    text-decoration: none;
    text-align: center;
    position: relative;
    overflow: hidden;
  }
  
  .btn-view-details:before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
    transition: all 0.6s ease;
  }
  
  .btn-view-details:hover:before {
    left: 100%;
  }
  
  .btn-view-details:hover {
    background-color: var(--card-accent-color, #4a90e2);
    filter: brightness(1.1);
    transform: translateY(-2px);
    box-shadow: 0 4px 10px rgba(0,0,0,0.1);
  }
  
  .btn-add-to-cart {
    width: 40px;
    height: 38px;
    background-color: var(--card-accent-color, #4a90e2);
    color: white;
    border: none;
    border-radius: 4px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
    position: relative;
    overflow: hidden;
  }
  
  .btn-add-to-cart:before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
    transition: all 0.6s ease;
  }
  
  .btn-add-to-cart:hover:before {
    left: 100%;
  }
  
  .btn-add-to-cart:hover {
    background-color: var(--card-accent-color, #4a90e2);
    filter: brightness(1.1);
    transform: translateY(-2px);
    box-shadow: 0 4px 10px rgba(0,0,0,0.1);
  }
  
  /* Tour-specific styles */
  .tour-details {
    padding: 0 20px 15px;
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
  }
  
  .tour-detail {
    padding: 4px 10px;
    background-color: rgba(0,0,0,0.05);
    border-radius: 20px;
    font-size: 0.8rem;
    display: flex;
    align-items: center;
    gap: 5px;
  }
  
  .tour-detail .icon {
    font-size: 0.9rem;
  }
  
  /* Card Layout Variations */
  
  /* Modern Layout */
  .product-card.modern-layout {
    border-radius: 4px;
  }
  
  .modern-layout .card-body {
    padding-top: 25px;
  }
  
  .modern-layout .card-title {
    font-size: 1.1rem;
    margin-bottom: 10px;
  }
  
  .modern-layout .product-card-media:after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 50%;
    background: linear-gradient(to top, rgba(0,0,0,0.4) 0%, transparent 100%);
    opacity: 0;
    transition: opacity 0.3s ease;
  }
  
  .modern-layout:hover .product-card-media:after {
    opacity: 1;
  }
  
  /* Minimal Layout */
  .product-card.minimal-layout {
    box-shadow: none;
    border: 1px solid #eee;
  }
  
  .minimal-layout .card-title {
    font-weight: 500;
    font-size: 0.95rem;
  }
  
  .minimal-layout .card-body {
    padding: 15px;
  }
  
  .minimal-layout .card-footer {
    padding: 10px 15px 15px;
    background-color: transparent;
  }
  
  .minimal-layout:hover {
    border-color: var(--card-accent-color, #4a90e2);
    box-shadow: 0 5px 15px rgba(0,0,0,0.05);
  }
  
  /* Grid-style Layout */
  .product-card.grid-layout .card-body {
    padding: 15px;
  }
  
  .grid-layout .product-price {
    font-size: 1rem;
  }
  
  .grid-layout .card-footer {
    padding: 0 15px 15px;
  }
  
  /* Card Flip Effect */
  .flip-enabled {
    perspective: 1000px;
  }
  
  .flip-enabled .card-inner {
    position: relative;
    width: 100%;
    height: 100%;
    transition: transform 0.8s;
    transform-style: preserve-3d;
  }
  
  .flip-enabled.flipped .card-inner {
    transform: rotateY(180deg);
  }
  
  .flip-enabled .card-front,
  .flip-enabled .card-back {
    position: absolute;
    width: 100%;
    height: 100%;
    -webkit-backface-visibility: hidden;
    backface-visibility: hidden;
    overflow: hidden;
  }
  
  .flip-enabled .card-back {
    transform: rotateY(180deg);
    background-color: var(--card-bg-color, #ffffff);
    padding: 20px;
    display: flex;
    flex-direction: column;
  }
  
  .flip-enabled .card-back-content {
    height: 100%;
    display: flex;
    flex-direction: column;
  }
  
  .flip-enabled .card-back-content h3 {
    font-size: 1.1rem;
    margin-bottom: 15px;
    color: var(--card-text-color, #333333);
  }
  
  .flip-enabled .extended-description {
    font-size: 0.9rem;
    color: #666;
    margin-bottom: 15px;
    flex-grow: 1;
    overflow-y: auto;
  }
  
  .flip-enabled .product-specs {
    margin-bottom: 20px;
  }
  
  .flip-enabled .spec-item {
    margin-bottom: 5px;
    font-size: 0.85rem;
  }
  
  .flip-enabled .spec-label {
    font-weight: 600;
    color: #555;
  }
  
  .flip-enabled .card-back-footer {
    margin-top: auto;
    display: flex;
    gap: 10px;
  }
  
  .flip-enabled .btn-view-full {
    flex: 1;
    background-color: var(--card-accent-color, #4a90e2);
    color: white;
    border: none;
    border-radius: 4px;
    padding: 8px 10px;
    font-weight: 600;
    font-size: 0.9rem;
    transition: all 0.2s ease;
    text-decoration: none;
    text-align: center;
  }
  
  .flip-enabled .btn-flip-back {
    width: 38px;
    background-color: #f5f5f5;
    color: #555;
    border: none;
    border-radius: 4px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
  }
  
  .flip-enabled .btn-flip-back:hover {
    background-color: #e0e0e0;
  }
  
  /* Animation Variations */
  .product-card-wrapper {
    opacity: 0;
  }
  
  .animate-fade {
    animation: fadeIn 0.6s ease forwards;
  }
  
  .animate-slide-up {
    animation: slideUp 0.6s ease forwards;
  }
  
  .animate-scale {
    animation: scaleIn 0.6s ease forwards;
  }
  
  @keyframes fadeIn {
    to { opacity: 1; }
  }
  
  @keyframes slideUp {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
  }
  
  @keyframes scaleIn {
    from { opacity: 0; transform: scale(0.9); }
    to { opacity: 1; transform: scale(1); }
  }
  
  /* Responsive styles */
  @media (max-width: 767px) {
    .btn-quick-action {
      opacity: 1;
      transform: translateY(0);
    }
    
    .quick-add-container {
      opacity: 1;
      transform: translateY(0);
    }
    
    .image-overlay {
      opacity: 1;
      background: linear-gradient(to bottom, transparent 40%, rgba(0,0,0,0.4) 100%);
    }
    
    .quick-actions {
      justify-content: flex-end;
    }
    
    .tour-details {
      flex-wrap: nowrap;
      overflow-x: auto;
      padding-bottom: 10px;
    }
    
    .tour-detail {
      flex-shrink: 0;
    }
  }
  
  @media (min-width: 992px) {
    .product-card.compact-layout .card-body {
      padding: 15px;
    }
    
    .product-card.compact-layout .card-footer {
      padding: 10px 15px 15px;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize carousels
    initializeProductCarousels();
    
    // Initialize zooms
    initializeProductZoom();
    
    // Initialize countdowns
    initializeCountdowns();
    
    // Initialize flip cards
    initializeFlipCards();
    
    // Initialize wishlist buttons
    initializeWishlist();
    
    // Initialize Quick Add
    initializeQuickAdd();
  });
  
  function initializeProductCarousels() {
    const carousels = document.querySelectorAll('.product-image-carousel');
    
    carousels.forEach(carousel => {
      const slides = carousel.querySelectorAll('.carousel-item');
      const nextBtn = carousel.querySelector('.next-slide');
      const prevBtn = carousel.querySelector('.prev-slide');
      let currentIndex = 0;
      
      if (!nextBtn || !prevBtn || slides.length <= 1) return;
      
      nextBtn.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        currentIndex = (currentIndex + 1) % slides.length;
        updateSlide();
      });
      
      prevBtn.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        currentIndex = (currentIndex - 1 + slides.length) % slides.length;
        updateSlide();
      });
      
      function updateSlide() {
        slides.forEach(slide => slide.classList.remove('active'));
        slides[currentIndex].classList.add('active');
      }
    });
  }
  
  function initializeProductZoom() {
    const zoomContainers = document.querySelectorAll('.zoom-container');
    
    zoomContainers.forEach(container => {
      const img = container.querySelector('img');
      if (!img) return;
      
      container.addEventListener('mousemove', function(e) {
        const { left, top, width, height } = container.getBoundingClientRect();
        const x = (e.clientX - left) / width;
        const y = (e.clientY - top) / height;
        
        img.style.transformOrigin = `${x * 100}% ${y * 100}%`;
      });
      
      container.addEventListener('mouseenter', function() {
        img.style.transform = 'scale(1.5)';
      });
      
      container.addEventListener('mouseleave', function() {
        img.style.transform = 'scale(1)';
      });
    });
  }
  
  function initializeCountdowns() {
    const countdowns = document.querySelectorAll('.sale-countdown');
    
    countdowns.forEach(countdown => {
      const endDate = new Date(countdown.dataset.endDate).getTime();
      const daysEl = countdown.querySelector('.days');
      const hoursEl = countdown.querySelector('.hours');
      const minutesEl = countdown.querySelector('.minutes');
      const secondsEl = countdown.querySelector('.seconds');
      
      if (!endDate || !daysEl || !hoursEl || !minutesEl || !secondsEl) return;
      
      function updateCountdown() {
        const now = new Date().getTime();
        const distance = endDate - now;
        
        if (distance < 0) {
          countdown.style.display = 'none';
          return;
        }
        
        const days = Math.floor(distance / (1000 * 60 * 60 * 24));
        const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((distance % (1000 * 60)) / 1000);
        
        daysEl.textContent = days.toString().padStart(2, '0');
        hoursEl.textContent = hours.toString().padStart(2, '0');
        minutesEl.textContent = minutes.toString().padStart(2, '0');
        secondsEl.textContent = seconds.toString().padStart(2, '0');
      }
      
      updateCountdown();
      setInterval(updateCountdown, 1000);
    });
  }
  
  function initializeFlipCards() {
    const flipButtons = document.querySelectorAll('.btn-flip');
    const flipBackButtons = document.querySelectorAll('.btn-flip-back');
    
    flipButtons.forEach(button => {
      button.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        const card = this.closest('.product-card');
        card.classList.add('flipped');
      });
    });
    
    flipBackButtons.forEach(button => {
      button.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        const card = this.closest('.product-card');
        card.classList.remove('flipped');
      });
    });
  }
  
  function initializeWishlist() {
    const wishlistButtons = document.querySelectorAll('.btn-wishlist');
    
    wishlistButtons.forEach(button => {
      button.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        
        const productId = this.dataset.productId;
        
        // Get existing wishlist from local storage
        let wishlist = JSON.parse(localStorage.getItem('wishlist') || '[]');
        
        // Toggle product in wishlist
        if (wishlist.includes(productId)) {
          wishlist = wishlist.filter(id => id !== productId);
          this.classList.remove('active');
        } else {
          wishlist.push(productId);
          this.classList.add('active');
        }
        
        // Save updated wishlist
        localStorage.setItem('wishlist', JSON.stringify(wishlist));
      });
      
      // Check if product is already in wishlist
      const productId = button.dataset.productId;
      const wishlist = JSON.parse(localStorage.getItem('wishlist') || '[]');
      if (wishlist.includes(productId)) {
        button.classList.add('active');
      }
    });
  }
  
  function initializeQuickAdd() {
    const quickAddButtons = document.querySelectorAll('.btn-quick-add');
    
    quickAddButtons.forEach(button => {
      button.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        
        const productId = this.dataset.productId;
        const variantId = this.dataset.variantId;
        
        if (!variantId) return;
        
        // Add loading state
        this.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Adding...';
        this.disabled = true;
        
        // Add to cart via AJAX
        const formData = {
          'items': [{
            'id': variantId,
            'quantity': 1
          }]
        };
        
        fetch('/cart/add.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(formData)
        })
        .then(response => response.json())
        .then(data => {
          // Success state
          this.innerHTML = '<span>✓ Added</span>';
          
          setTimeout(() => {
            this.innerHTML = 'Add to Cart';
            this.disabled = false;
          }, 2000);
          
          // Refresh mini cart if it exists
          if (typeof window.refreshMiniCart === 'function') {
            window.refreshMiniCart();
          }
          
          // Update cart count if element exists
          const cartCountElements = document.querySelectorAll('.cart-count');
          if (cartCountElements.length > 0) {
            fetch('/cart.js')
              .then(response => response.json())
              .then(cart => {
                cartCountElements.forEach(element => {
                  element.textContent = cart.item_count;
                  element.classList.add('animated');
                  setTimeout(() => {
                    element.classList.remove('animated');
                  }, 1000);
                });
              })
              .catch(error => console.error('Error fetching cart:', error));
          }
        })
        .catch(error => {
          console.error('Error adding to cart:', error);
          this.innerHTML = 'Error';
          
          setTimeout(() => {
            this.innerHTML = 'Add to Cart';
            this.disabled = false;
          }, 2000);
        });
      });
    });
  }
  
  // Initialize compare functionality
  function initializeCompare() {
    const compareButtons = document.querySelectorAll('.btn-compare');
    
    compareButtons.forEach(button => {
      button.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        
        const productId = this.dataset.productId;
        
        // Get existing compare list from local storage
        let compareList = JSON.parse(localStorage.getItem('compare_products') || '[]');
        
        // Check if we're at the max compare items
        if (!compareList.includes(productId) && compareList.length >= 4) {
          alert('You can compare a maximum of 4 products at once. Please remove a product before adding another.');
          return;
        }
        
        // Toggle product in compare list
        if (compareList.includes(productId)) {
          compareList = compareList.filter(id => id !== productId);
          this.classList.remove('active');
          this.querySelector('.tooltip').textContent = 'Compare';
        } else {
          compareList.push(productId);
          this.classList.add('active');
          this.querySelector('.tooltip').textContent = 'Remove from compare';
        }
        
        // Save updated compare list
        localStorage.setItem('compare_products', JSON.stringify(compareList));
        
        // Update compare count if element exists
        const compareCount = document.querySelector('.compare-count');
        if (compareCount) {
          compareCount.textContent = compareList.length;
          
          if (compareList.length > 0) {
            compareCount.classList.add('has-items');
          } else {
            compareCount.classList.remove('has-items');
          }
        }
      });
      
      // Check if product is already in compare list
      const productId = button.dataset.productId;
      const compareList = JSON.parse(localStorage.getItem('compare_products') || '[]');
      if (compareList.includes(productId)) {
        button.classList.add('active');
        button.querySelector('.tooltip').textContent = 'Remove from compare';
      }
    });
  }
  
  // Initialize quick view
  function initializeQuickView() {
    const quickViewButtons = document.querySelectorAll('.btn-quickview');
    
    quickViewButtons.forEach(button => {
      button.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        
        const productUrl = this.dataset.productUrl;
        if (!productUrl) return;
        
        // Create modal if it doesn't exist
        let quickViewModal = document.getElementById('quickViewModal');
        
        if (!quickViewModal) {
          quickViewModal = document.createElement('div');
          quickViewModal.id = 'quickViewModal';
          quickViewModal.className = 'quick-view-modal';
          quickViewModal.innerHTML = `
            <div class="quick-view-overlay"></div>
            <div class="quick-view-container">
              <div class="quick-view-content">
                <div class="quick-view-loading">
                  <div class="spinner"></div>
                </div>
              </div>
              <button type="button" class="quick-view-close" aria-label="Close quick view">
                <svg width="20" height="20" viewBox="0 0 20 20" fill="none">
                  <path d="M15 5L5 15M5 5L15 15" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                </svg>
              </button>
            </div>
          `;
          document.body.appendChild(quickViewModal);
          
          // Add event listeners
          const overlay = quickViewModal.querySelector('.quick-view-overlay');
          const closeButton = quickViewModal.querySelector('.quick-view-close');
          
          overlay.addEventListener('click', closeQuickView);
          closeButton.addEventListener('click', closeQuickView);
        }
        
        // Show modal
        quickViewModal.classList.add('active');
        document.body.classList.add('quick-view-open');
        
        // Load content
        const contentContainer = quickViewModal.querySelector('.quick-view-content');
        contentContainer.innerHTML = '<div class="quick-view-loading"><div class="spinner"></div></div>';
        
        fetch(productUrl)
          .then(response => response.text())
          .then(html => {
            contentContainer.innerHTML = html;
            
            // Initialize any needed functionality in the quick view
            const quickViewProduct = contentContainer.querySelector('.quick-view-product');
            if (quickViewProduct) {
              // Initialize any product functionality needed
            }
          })
          .catch(error => {
            console.error('Error loading quick view:', error);
            contentContainer.innerHTML = '<div class="quick-view-error">There was an error loading the product. Please try again.</div>';
          });
      });
    });
    
    function closeQuickView() {
      const modal = document.getElementById('quickViewModal');
      if (modal) {
        modal.classList.remove('active');
        document.body.classList.remove('quick-view-open');
      }
    }
    
    // Close with escape key
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape') {
        closeQuickView();
      }
    });
  }
  
  // Call all the initializers
  document.addEventListener('DOMContentLoaded', function() {
    // Add the compare functionality initialization
    initializeCompare();
    
    // Add the quick view functionality initialization
    initializeQuickView();
  });
</script>