<div class="collection-filter py-3">
  <form class="filter-form">
    <div class="filter-header d-flex justify-content-between align-items-center mb-3">
      <h3 class="filter-title mb-0">Filters</h3>
      <button type="button" class="btn-close-filters d-lg-none">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M18 6L6 18"></path>
          <path d="M6 6L18 18"></path>
        </svg>
      </button>
    </div>
    
    <!-- Filter Groups -->
    <div class="filter-sections">
      <!-- Collection Chooser -->
      <div class="filter-group mb-4">
        <div class="filter-group-header" data-bs-toggle="collapse" data-bs-target="#collectionFilter">
          <h4 class="filter-group-title">Collections</h4>
          <span class="filter-group-toggle">
            <svg class="icon-plus" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M12 5v14M5 12h14"></path>
            </svg>
            <svg class="icon-minus" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M5 12h14"></path>
            </svg>
          </span>
        </div>
        
        <div id="collectionFilter" class="filter-group-body collapse show">
          <ul class="filter-collection-list">
            {%- for col in collections -%}
              <li class="filter-collection-item{% if col.handle == collection.handle %} active{% endif %}">
                <a href="{{ col.url }}" class="filter-link">
                  {{ col.title }}
                  <span class="product-count">{{ col.products_count }}</span>
                </a>
              </li>
            {%- endfor -%}
          </ul>
        </div>
      </div>
      
      <!-- Price Range Filter -->
      <div class="filter-group mb-4">
        <div class="filter-group-header" data-bs-toggle="collapse" data-bs-target="#priceFilter">
          <h4 class="filter-group-title">Price Range</h4>
          <span class="filter-group-toggle">
            <svg class="icon-plus" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M12 5v14M5 12h14"></path>
            </svg>
            <svg class="icon-minus" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M5 12h14"></path>
            </svg>
          </span>
        </div>
        
        <div id="priceFilter" class="filter-group-body collapse show">
          <div class="price-range-slider">
            <div class="price-inputs d-flex align-items-center">
              <div class="price-field">
                <label for="price-min">Min</label>
                <div class="input-group">
                  <span class="input-group-text">$</span>
                  <input type="number" id="price-min" class="form-control" min="0" value="0">
                </div>
              </div>
              <div class="price-separator">-</div>
              <div class="price-field">
                <label for="price-max">Max</label>
                <div class="input-group">
                  <span class="input-group-text">$</span>
                  <input type="number" id="price-max" class="form-control" min="0" value="1000">
                </div>
              </div>
            </div>
            
            <div class="range-slider mt-3">
              <input type="range" class="form-range" min="0" max="1000" value="0" id="price-range-min">
              <input type="range" class="form-range" min="0" max="1000" value="1000" id="price-range-max">
              <div class="slider-track"></div>
              <div class="slider-range"></div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Product Type Filter -->
      <div class="filter-group mb-4">
        <div class="filter-group-header" data-bs-toggle="collapse" data-bs-target="#typeFilter">
          <h4 class="filter-group-title">Product Type</h4>
          <span class="filter-group-toggle">
            <svg class="icon-plus" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M12 5v14M5 12h14"></path>
            </svg>
            <svg class="icon-minus" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M5 12h14"></path>
            </svg>
          </span>
        </div>
        
        <div id="typeFilter" class="filter-group-body collapse show">
          <div class="filter-options">
            {% assign product_types = collection.all_products | map: 'type' | uniq %}
            {% for type in product_types %}
              <div class="form-check">
                <input class="form-check-input" type="checkbox" id="type-{{ type | handle }}" value="{{ type | handle }}" data-filter="type">
                <label class="form-check-label" for="type-{{ type | handle }}">
                  {{ type }}
                </label>
              </div>
            {% endfor %}
          </div>
        </div>
      </div>
      
      <!-- Tag Filter (for tours) -->
      <div class="filter-group mb-4">
        <div class="filter-group-header" data-bs-toggle="collapse" data-bs-target="#destinationFilter">
          <h4 class="filter-group-title">Destination</h4>
          <span class="filter-group-toggle">
            <svg class="icon-plus" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M12 5v14M5 12h14"></path>
            </svg>
            <svg class="icon-minus" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M5 12h14"></path>
            </svg>
          </span>
        </div>
        
        <div id="destinationFilter" class="filter-group-body collapse show">
          <div class="filter-options">
            {% assign destination_tags = collection.all_tags | where: "destination:" %}
            {% for tag in destination_tags %}
              {% assign destination = tag | remove: 'destination:' %}
              <div class="form-check">
                <input class="form-check-input" type="checkbox" id="dest-{{ destination | handle }}" value="{{ tag | handle }}" data-filter="tag">
                <label class="form-check-label" for="dest-{{ destination | handle }}">
                  {{ destination }}
                </label>
              </div>
            {% endfor %}
          </div>
        </div>
      </div>
      
      <!-- Clear Filters Button -->
      <div class="filter-actions mt-4">
        <button type="button" class="btn btn-outline-secondary btn-clear-filters">Clear All Filters</button>
      </div>
    </div>
  </form>
</div>

<style>
  .collection-filter {
    background-color: #fff;
    border-radius: 10px;
    box-shadow: 0 5px 15px rgba(0,0,0,0.05);
    height: 100%;
  }
  
  .filter-title {
    font-size: 1.2rem;
    font-weight: 600;
    color: #333;
  }
  
  .filter-group {
    border-bottom: 1px solid #eee;
    padding-bottom: 15px;
  }
  
  .filter-group:last-child {
    border-bottom: none;
  }
  
  .filter-group-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    cursor: pointer;
    padding: 10px 0;
  }
  
  .filter-group-title {
    font-size: 1rem;
    margin: 0;
    font-weight: 600;
    color: #333;
  }
  
  .filter-group-toggle .icon-minus {
    display: inline;
  }
  
  .filter-group-toggle .icon-plus {
    display: none;
  }
  
  .collapsed .filter-group-toggle .icon-minus {
    display: none;
  }
  
  .collapsed .filter-group-toggle .icon-plus {
    display: inline;
  }
  
  .filter-group-body {
    padding-top: 10px;
  }
  
  /* Collection List */
  .filter-collection-list {
    list-style: none;
    padding: 0;
    margin: 0;
  }
  
  .filter-collection-item {
    margin-bottom: 8px;
  }
  
  .filter-link {
    display: flex;
    justify-content: space-between;
    align-items: center;
    color: #555;
    text-decoration: none;
    padding: 5px 8px;
    border-radius: 4px;
    transition: all 0.2s ease;
  }
  
  .filter-link:hover {
    background-color: #f5f5f5;
    color: #333;
  }
  
  .filter-collection-item.active .filter-link {
    background-color: #4a90e2;
    color: white;
  }
  
  .product-count {
    font-size: 0.8rem;
    color: #999;
    background-color: #f0f0f0;
    padding: 2px 6px;
    border-radius: 10px;
  }
  
  .filter-collection-item.active .product-count {
    background-color: rgba(255,255,255,0.2);
    color: white;
  }
  
  /* Price Range Slider */
  .price-inputs {
    margin-bottom: 15px;
  }
  
  .price-field {
    flex: 1;
  }
  
  .price-separator {
    margin: 0 10px;
    align-self: flex-end;
    margin-bottom: 10px;
  }
  
  .price-field label {
    display: block;
    font-size: 0.8rem;
    margin-bottom: 5px;
    color: #666;
  }
  
  .range-slider {
    position: relative;
    height: 5px;
    margin: 10px 0 20px;
  }
  
  .slider-track {
    position: absolute;
    width: 100%;
    height: 5px;
    background: #ddd;
    border-radius: 5px;
  }
  
  .slider-range {
    position: absolute;
    height: 5px;
    background: #4a90e2;
    border-radius: 5px;
  }
  
  .form-range {
    position: absolute;
    width: 100%;
    -webkit-appearance: none;
    height: 5px;
    background: transparent;
    margin: 0;
    outline: none;
    pointer-events: none;
  }
  
  .form-range::-webkit-slider-thumb {
    -webkit-appearance: none;
    width: 16px;
    height: 16px;
    background: #fff;
    border: 2px solid #4a90e2;
    border-radius: 50%;
    cursor: pointer;
    pointer-events: auto;
    margin-top: -5px;
  }
  
  .form-range::-moz-range-thumb {
    width: 16px;
    height: 16px;
    background: #fff;
    border: 2px solid #4a90e2;
    border-radius: 50%;
    cursor: pointer;
    pointer-events: auto;
  }
  
  /* Filter Options */
  .filter-options {
    max-height: 200px;
    overflow-y: auto;
  }
  
  .form-check {
    margin-bottom: 8px;
  }
  
  .form-check-input {
    cursor: pointer;
  }
  
  .form-check-label {
    cursor: pointer;
    color: #555;
    font-size: 0.9rem;
  }
  
  /* Filter Actions */
  .filter-actions {
    display: flex;
    justify-content: center;
  }
  
  .btn-clear-filters {
    width: 100%;
    border-radius: 4px;
    font-size: 0.9rem;
    padding: 8px 15px;
    transition: all 0.2s ease;
  }
  
  .btn-clear-filters:hover {
    background-color: #dc3545;
    color: white;
    border-color: #dc3545;
  }
  
  /* Mobile Styles */
  @media (max-width: 991px) {
    .collection-filter {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 1050;
      border-radius: 0;
      transform: translateX(-100%);
      transition: transform 0.3s ease;
      overflow-y: auto;
      padding: 20px;
    }
    
    .collection-filter.active {
      transform: translateX(0);
    }
    
    .filter-header {
      position: sticky;
      top: 0;
      z-index: 2;
      background-color: #fff;
      padding: 15px 0;
    }
    
    .btn-close-filters {
      background: transparent;
      border: none;
      padding: 5px;
    }
    
    .collection-backdrop {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0,0,0,0.5);
      z-index: 1040;
      display: none;
    }
    
    .collection-backdrop.active {
      display: block;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Mobile filter toggle
    const filterToggle = document.querySelector('.filter-toggle');
    const filterClose = document.querySelector('.btn-close-filters');
    const collectionFilter = document.querySelector('.collection-filter');
    
    if (filterToggle) {
      filterToggle.addEventListener('click', function() {
        document.querySelector('.collection-filter').classList.add('active');
        document.querySelector('.collection-backdrop').classList.add('active');
        document.body.style.overflow = 'hidden';
      });
    }
    
    if (filterClose) {
      filterClose.addEventListener('click', function() {
        document.querySelector('.collection-filter').classList.remove('active');
        document.querySelector('.collection-backdrop').classList.remove('active');
        document.body.style.overflow = '';
      });
    }
    
    // Price range slider
    const minRange = document.getElementById('price-range-min');
    const maxRange = document.getElementById('price-range-max');
    const minInput = document.getElementById('price-min');
    const maxInput = document.getElementById('price-max');
    const sliderRange = document.querySelector('.slider-range');
    
    if (minRange && maxRange && minInput && maxInput && sliderRange) {
      function updateSlider() {
        const min = parseInt(minRange.value);
        const max = parseInt(maxRange.value);
        
        if (min > max) {
          minRange.value = max;
        }
        
        const percent1 = (minRange.value / minRange.max) * 100;
        const percent2 = (maxRange.value / maxRange.max) * 100;
        
        sliderRange.style.left = percent1 + '%';
        sliderRange.style.width = (percent2 - percent1) + '%';
        
        minInput.value = minRange.value;
        maxInput.value = maxRange.value;
      }
      
      function updateRange() {
        let min = parseInt(minInput.value);
        let max = parseInt(maxInput.value);
        
        if (min > max) {
          min = max;
          minInput.value = min;
        }
        
        minRange.value = min;
        maxRange.value = max;
        
        const percent1 = (min / minRange.max) * 100;
        const percent2 = (max / maxRange.max) * 100;
        
        sliderRange.style.left = percent1 + '%';
        sliderRange.style.width = (percent2 - percent1) + '%';
      }
      
      minRange.addEventListener('input', updateSlider);
      maxRange.addEventListener('input', updateSlider);
      minInput.addEventListener('change', updateRange);
      maxInput.addEventListener('change', updateRange);
      
      // Initialize slider
      updateSlider();
    }
    
    // Clear filters
    const clearButton = document.querySelector('.btn-clear-filters');
    if (clearButton) {
      clearButton.addEventListener('click', function() {
        const checkboxes = document.querySelectorAll('.form-check-input');
        checkboxes.forEach(checkbox => {
          checkbox.checked = false;
        });
        
        if (minInput && maxInput && minRange && maxRange) {
          minInput.value = minRange.min;
          maxInput.value = maxRange.max;
          minRange.value = minRange.min;
          maxRange.value = maxRange.max;
          updateSlider();
        }
      });
    }
    
    // Filter functionality (based on URL parameters)
    function applyFilters() {
      const checkboxes = document.querySelectorAll('.form-check-input:checked');
      const types = [];
      const tags = [];
      
      checkboxes.forEach(checkbox => {
        const filter = checkbox.dataset.filter;
        const value = checkbox.value;
        
        if (filter === 'type') {
          types.push(value);
        } else if (filter === 'tag') {
          tags.push(value);
        }
      });
      
      const minPrice = minInput ? minInput.value : null;
      const maxPrice = maxInput ? maxInput.value : null;
      
      // Build URL
      const url = new URL(window.location.href);
      url.searchParams.delete('type');
      url.searchParams.delete('tag');
      url.searchParams.delete('min_price');
      url.searchParams.delete('max_price');
      
      if (types.length > 0) {
        url.searchParams.set('type', types.join(','));
      }
      
      if (tags.length > 0) {
        url.searchParams.set('tag', tags.join(','));
      }
      
      if (minPrice && parseInt(minPrice) > 0) {
        url.searchParams.set('min_price', minPrice);
      }
      
      if (maxPrice && parseInt(maxPrice) < maxRange.max) {
        url.searchParams.set('max_price', maxPrice);
      }
      
      window.location.href = url.toString();
    }
    
    // Apply filter button
    const applyButton = document.createElement('button');
    applyButton.type = 'button';
    applyButton.className = 'btn btn-primary btn-apply-filters mt-3 w-100';
    applyButton.textContent = 'Apply Filters';
    
    applyButton.addEventListener('click', applyFilters);
    
    const filterActions = document.querySelector('.filter-actions');
    if (filterActions) {
      filterActions.appendChild(applyButton);
    }
    
    // Set current filters based on URL parameters
    const urlParams = new URLSearchParams(window.location.search);
    
    // Set types
    if (urlParams.has('type')) {
      const types = urlParams.get('type').split(',');
      types.forEach(type => {
        const checkbox = document.getElementById('type-' + type);
        if (checkbox) checkbox.checked = true;
      });
    }
    
    // Set tags
    if (urlParams.has('tag')) {
      const tags = urlParams.get('tag').split(',');
      tags.forEach(tag => {
        const checkbox = document.getElementById('dest-' + tag.replace('destination:', ''));
        if (checkbox) checkbox.checked = true;
      });
    }
    
    // Set price range
    if (urlParams.has('min_price') && minInput && minRange) {
      const min = parseInt(urlParams.get('min_price'));
      minInput.value = min;
      minRange.value = min;
    }
    
    if (urlParams.has('max_price') && maxInput && maxRange) {
      const max = parseInt(urlParams.get('max_price'));
      maxInput.value = max;
      maxRange.value = max;
    }
    
    if ((urlParams.has('min_price') || urlParams.has('max_price')) && sliderRange) {
      updateSlider();
    }
  });
</script>
