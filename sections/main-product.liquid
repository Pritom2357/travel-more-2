<div class="product-container" style="background-color: {{ section.settings.background_color }}; color: {{ section.settings.text_color }};">
  <div class="image-plus-info">
    <div class="product-gallery-container">
      <div class="main-image-container">
        {% if product.featured_image %}
          <div class="image-wrapper">
            <img 
              id="mainProductImage" 
              src="{{ product.featured_image | img_url: '800x' }}" 
              alt="{{ product.featured_image.alt | escape }}"
              class="main-product-image current"
            >
            <img 
              id="secondaryProductImage" 
              src="{{ product.featured_image | img_url: '800x' }}" 
              alt="{{ product.featured_image.alt | escape }}"
              class="main-product-image next"
            >
          </div>
          
          {% if product.images.size > 1 %}
            <div class="gallery-navigation">
              <button id="prevSlide" class="nav-button prev" aria-label="Previous image">
                <i class="bi bi-chevron-left"></i>
              </button>
              <button id="toggleAutoSlide" class="nav-button toggle" aria-label="Toggle slideshow" title="Pause Auto Slide">
                <i class="bi bi-pause-fill"></i>
              </button>
              <button id="nextSlide" class="nav-button next" aria-label="Next image">
                <i class="bi bi-chevron-right"></i>
              </button>
            </div>
          {% endif %}
        {% else %}
          <div class="no-image-placeholder">
            <span>No image available</span>
          </div>
        {% endif %}
      </div>
      
      {% if product.images.size > 1 %}
        <div class="thumbnails-container">
          <div class="thumbnails-scroll-container">
            {% for image in product.images %}
              <div class="thumbnail-item {% if forloop.first %}active{% endif %}" data-index="{{ forloop.index0 }}">
                <img 
                  src="{{ image | img_url: '150x' }}" 
                  alt="{{ image.alt | escape }}"
                  data-full-image="{{ image | img_url: '800x' }}"
                  class="thumbnail-image"
                  onclick="changeMainImage(this)"
                >
              </div>
            {% endfor %}
          </div>
          
          {% if product.images.size > 4 %}
            <div class="thumbnail-controls">
              <button class="thumbnail-scroll-btn scroll-up" aria-label="Scroll up">
                <i class="bi bi-chevron-up"></i>
              </button>
              <button class="thumbnail-scroll-btn scroll-down" aria-label="Scroll down">
                <i class="bi bi-chevron-down"></i>
              </button>
            </div>
          {% endif %}
        </div>
      {% endif %}
    </div>

    <div class="vertical-divider"></div>
    
    <div class="product-info-container">
      <div class="essential-info">
        <div class="product-name" style="color: {{ section.settings.product_title_color }};">
          {{ product.title }}
        </div>
        {% comment %} {% if product.collections and section.settings.show_collections %}
          <div class="product-collections">
            <div class="collection-buttons">
              <span class="info-label" style="color: {{ section.settings.label_color }};">Collections:</span>
              {% for collection in product.collections %}
                <button class="collection-btn">
                  <a href="{{ collection.url }}" style="color: {{ section.settings.collection_button_color }};">{{ collection.title }}</a>
                </button>
              {% endfor %}
            </div>
          </div>
        {% endif %} {% endcomment %}
        {% comment %} {% if product.tags and section.settings.show_tags %}
          <div class="product-tags">
            <div class="tag-buttons">
             <span class="info-label" style="color: {{ section.settings.label_color }};">Tags:</span>
              {% for tag in product.tags %}
                <button class="tag-btn" data-tag="{{ tag.name | handle }}" style="color: {{ section.settings.tag_text_color }};">
                  {{ tag }}
                </button>
              {% endfor %}
            </div>
          </div>
        {% endif %} {% endcomment %}
        {% comment %} {% if product.vendor and section.settings.show_vendor %}
          <div class="product-vendor">
            <span class="info-label" style="color: {{ section.settings.label_color }};">From:</span> 
            <span class="vendor-name" style="color: {{ section.settings.vendor_text_color }};">{{ product.vendor }}</span>
          </div>
        {% endif %} {% endcomment %}

        <div class="location-map">
          {% if product.metafields.custom.destination %}
            <div class="location-name">
              <i class="bi bi-geo-alt-fill"></i>
              {{ product.metafields.custom.destination }}
            </div>
          {% endif %}
          
          {% if product.metafields.custom.destination_link %}
            <div style="position: relative;">
              <div style="position: relative; padding-bottom: 75%; height: 0; overflow: hidden;">
                <iframe 
                  style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" 
                  loading="lazy" 
                  allowfullscreen="" 
                  src="{{ product.metafields.custom.destination_link }}">
                </iframe>
              </div>
            </div>
          {% endif %}
        </div>

        <div class="variants-container">
          {% unless product.has_only_default_variant %}
            <div class="variant-options-row">
              {% for option in product.options_with_values %}
                <div class="variant-option-group">
                  <label class="option-label" style="color: {{ section.settings.label_color }};">{{ option.name }}:</label>
                  
                  <div class="option-selector">
                    <select name="{{ option.name | handleize }}" class="single-option-selector" data-option-index="{{ forloop.index0 }}">
                      {% for value in option.values %}
                        <option value="{{ value | escape }}" 
                          {% if option.selected_value == value %}selected="selected"{% endif %}>
                          {{ value }}
                        </option>
                      {% endfor %}
                    </select>
                  </div>
                </div>
              {% endfor %}
            </div>
          {% endunless %}
          
          <!-- Hidden select for the actual variant ID -->
          <select name="id" id="productSelect" class="product-variant-id" style="display: none;">
            {% for variant in product.variants %}
              <option value="{{ variant.id }}" 
                {% if variant == product.selected_or_first_available_variant %}selected="selected"{% endif %}
                {% unless variant.available %}disabled="disabled"{% endunless %}>
                {{ variant.title }} - {{ variant.price | money }}
              </option>
            {% endfor %}
          </select>

          <div class="price-section">
            <div class="current-price" id="productPrice">
              {% if product.compare_at_price_max > product.price %}
                <span class="sale-price" data-regular-price="{{ product.price | money_without_currency }}">{{ product.price | money_with_currency }}</span>
                <span class="compare-at-price" data-compare-price="{{ product.compare_at_price | money_without_currency }}">{{ product.compare_at_price | money_with_currency }}</span>
                <span class="discount-badge">
                  {% assign savings = product.compare_at_price_max | minus: product.price | times: 100 | divided_by: product.compare_at_price_max %}
                  Save {{ savings }}%
                </span>
              {% else %}
                <span data-regular-price="{{ product.price | money_without_currency }}">{{ product.price | money }}</span>
              {% endif %}
            </div>
            
            <div class="availability" id="productAvailability">
              {% if product.available %}
                <span class="in-stock">In Stock</span>
              {% else %}
                <span class="out-of-stock">Out of Stock</span>
              {% endif %}
            </div>
          </div>
          
          <div class="add-to-cart-container">
            <button type="button" 
              id="continueToBooking" 
              class="add-to-cart-button {% unless product.available %}disabled{% endunless %}"
              {% unless product.available %}disabled{% endunless %}>
              {% if product.available %}Continue to Booking{% else %}Sold Out{% endif %}
            </button>
          </div>
        </div>
        <div class="custom-tour-part">
          <a href="/pages/tour-request" class="custom-tour-button">
            Request Custom Tour
          </a>
        </div>
        
        
      </div>
    </div>
  </div>
  <div class="description-box" style="background-color: {{ section.settings.description_bg }}; color: {{ section.settings.description_text_color }};">
    {{ product.description }}
  </div>
</div>

<style>
  .product-container {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
    color: #D3D3D3;
  }
  
  .image-plus-info {
    display: flex;
    flex-wrap: wrap;
    gap: 30px;
  }
  
  /* Product Gallery */
  .product-gallery-container {
    flex: 1;
    min-width: 300px;
    max-width: 50%;
    display: flex;
    gap: 15px;
    position: relative;
  }
  
  /* Main Image */
  .main-image-container {
    position: relative;
    flex-grow: 1;
    width: calc(100% - 95px);
    height: 500px;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    border-radius: 8px;
    background-color: #f8f8f8;
  }
  
  .main-product-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: opacity 0.5s ease, transform 0.5s ease;
  }
  
  .main-product-image.fade-out {
    opacity: 0;
    transform: scale(0.95);
  }
  
  .main-product-image.fade-in {
    opacity: 1;
    transform: scale(1);
  }
  
  .main-product-image:hover {
    transform: scale(1.05);
  }
  
  .no-image-placeholder {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #f0f0f0;
    color: #888;
    font-size: 16px;
  }
  
  /* Thumbnails */
  .thumbnails-container {
    width: 80px;
    position: relative;
  }
  
  .thumbnails-scroll-container {
    height: 500px;
    overflow-y: auto;
    scrollbar-width: none; 
    -ms-overflow-style: none; 
    padding-right: 5px;
    display: flex;
    flex-direction: column;
    gap: 10px;
  }
  
  .thumbnails-scroll-container::-webkit-scrollbar {
    display: none;
  }
  
  .thumbnail-item {
    width: 80px;
    height: 80px;
    border-radius: 4px;
    overflow: hidden;
    cursor: pointer;
    opacity: 0.7;
    transition: opacity 0.2s ease, border 0.2s ease;
    border: 2px solid transparent;
  }
  
  .thumbnail-item:hover {
    opacity: 0.9;
  }
  
  .thumbnail-item.active {
    opacity: 1;
    border: 2px solid #4a90e2;
  }
  
  .thumbnail-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  .thumbnail-controls {
    position: absolute;
    right: 0;
    top: 0;
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    padding: 10px 0;
  }
  
  .thumbnail-scroll-btn {
    width: 24px;
    height: 24px;
    border-radius: 50%;
    background-color: rgba(255, 255, 255, 0.8);
    border: 1px solid #ddd;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }
  
  .thumbnail-scroll-btn:hover {
    background-color: rgba(255, 255, 255, 1);
  }
  
  /* Gallery Navigation */
  .gallery-navigation {
    position: absolute;
    bottom: 15px;
    left: 0;
    right: 0;
    display: flex;
    justify-content: center;
    gap: 10px;
    opacity: 0;
    transition: opacity 0.3s ease;
    z-index: 10;
  }

  .main-image-container:hover .gallery-navigation {
    opacity: 1;
  }

  .nav-button {
    width: 36px;
    height: 36px;
    border-radius: 50%;
    border: none;
    background-color: rgba(255, 255, 255, 0.7);
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: background-color 0.2s ease;
    position: relative; 
    z-index: 15; 
  }

  .nav-button i {
    font-size: 18px;
    color: #333;
  }
  
  /* Product Info */
  .product-info-container {
    flex: 1;
    min-width: 300px;
    padding: 0 10px;
  }
  
  /* Responsive Design */
  @media (max-width: 768px) {
    .image-plus-info {
      flex-direction: column;
    }
    
    .product-gallery-container {
      max-width: 100%;
      flex-direction: column-reverse;
      margin-bottom: 20px;
    }
    
    .main-image-container {
      width: 100%;
      height: 350px;
    }
    
    .thumbnails-container {
      width: 100%;
      height: auto;
      margin-bottom: 15px;
    }
    
    .thumbnails-scroll-container {
      height: auto;
      flex-direction: row;
      overflow-x: auto;
      overflow-y: hidden;
      height: 80px;
      padding-bottom: 5px;
    }
    
    .thumbnail-controls {
      height: auto;
      width: 100%;
      flex-direction: row;
      top: auto;
      bottom: 50%;
      transform: translateY(50%);
      padding: 0 10px;
    }
    
    .scroll-up {
      transform: rotate(-90deg);
    }
    
    .scroll-down {
      transform: rotate(-90deg);
    }

    .product-info-container {
      padding: 0;
    }
    
    .price-section {
      flex-direction: column;
      align-items: flex-start;
      gap: 10px;
    }
    
    .current-price {
      margin-bottom: 10px;
    }
  }

  /* Add these styles for the crossfade effect */
  .image-wrapper {
    position: relative;
    width: 100%;
    height: 100%;
    z-index: 5;
  }

  .main-product-image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: opacity 0.8s ease, transform 0.8s ease;
  }

  .main-product-image.current {
    opacity: 1;
    z-index: 2;
  }

  .main-product-image.next {
    opacity: 0;
    z-index: 1;
  }

  /* Animation for slide transitions */
  @keyframes slideInFromRight {
    0% {
      transform: translateX(20px);
      opacity: 0;
    }
    100% {
      transform: translateX(0);
      opacity: 1;
    }
  }

  @keyframes slideInFromLeft {
    0% {
      transform: translateX(-20px);
      opacity: 0;
    }
    100% {
      transform: translateX(0);
      opacity: 1;
    }
  }

  .slide-from-right {
    animation: slideInFromRight 0.5s forwards;
  }

  .slide-from-left {
    animation: slideInFromLeft 0.5s forwards;
  }

  .vertical-divider {
    width: 4px;
    background-color:rgb(103, 97, 97);
    margin: 0 15px;
    align-self: stretch;
    opacity: 1.0;
    box-shadow: 0px 0px 2px rgba(0, 0, 0, 0.1);
  }

  /* Product Info Styles */
  .essential-info {
    display: flex;
    flex-direction: column;
    gap: 15px;
  }

  .product-name {
    font-size: 28px;
    font-weight: 700;
    color:rgb(30, 27, 27);
    margin-bottom: 5px;
    letter-spacing: 0.5px;
    line-height: 1.2;
  }

  .info-label {
    font-size: 14px;
    color: #a0a0a0;
    margin-right: 10px;
  }

  /* Collection buttons styling */
  .product-collections, .product-tags {
    margin-bottom: 10px;
  }

  .collection-buttons, .tag-buttons {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
    margin-top: 8px;
  }

  .collection-btn, .tag-btn {
    padding: 6px 12px;
    border-radius: 20px;
    font-size: 13px;
    transition: all 0.2s ease;
    cursor: pointer;
    border: 1px solid rgba(255, 255, 255, 0.2);
    background-color: rgba(255, 255, 255, 0.1);
  }

  .collection-btn {
    background-color: rgba(74, 144, 226, 0.2);
  }

  .collection-btn:hover {
    background-color: rgba(74, 144, 226, 0.3);
    transform: translateY(-2px);
  }

  .tag-btn:hover {
    background-color: rgba(255, 255, 255, 0.2);
    transform: translateY(-2px);
  }

  .collection-btn a {
    color: #4a90e2;
    text-decoration: none;
  }

  .tag-btn {
    color:rgb(99, 11, 11);
  }

  .product-vendor {
    margin-top: 5px;
    font-size: 15px;
  }

  .vendor-name {
    font-weight: 600;
    color:rgb(21, 20, 20);
  }

  /* Price section styling */
  .price-section {
    margin-top: 15px;
    padding: 15px 0;
    border-top: 1px solid rgba(255, 255, 255, 0.1);
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .current-price {
    font-size: 24px;
    font-weight: 700;
    color: #ffffff;
    display: flex;
    align-items: center;
    gap: 10px;
    flex-wrap: wrap;
  }

  .sale-price {
    color: #4CAF50;
  }

  .compare-at-price {
    text-decoration: line-through;
    color: #a0a0a0;
    font-size: 18px;
  }

  .discount-badge {
    background-color: #4CAF50;
    color: white;
    padding: 3px 8px;
    border-radius: 12px;
    font-size: 12px;
    font-weight: 600;
  }

  .availability {
    font-size: 14px;
    font-weight: 600;
  }

  .in-stock {
    color: #4CAF50;
  }

  .out-of-stock {
    color: #F44336;
  }

  /* Add this to your style section */
  .tag-btn.active {
    background-color: rgba(255, 255, 255, 0.3);
    border-color: rgba(255, 255, 255, 0.5);
    transform: scale(1.05);
  }

  /* Variant styling */
  .variants-container {
    margin-top: 20px;
    display: flex;
    flex-direction: column;
    gap: 15px;
  }

  .variant-option-group {
    display: flex;
    flex-direction: column;
    gap: 5px;
  }

  .option-label {
    font-size: 14px;
    font-weight: 600;
    color: #a0a0a0;
  }

  .option-selector {
    width: 100%;
  }

  .single-option-selector {
    width: 100%;
    padding: 10px;
    border: 1px solid #e0e0e0;
    border-radius: 6px;
    background-color: rgba(255, 255, 255, 0.1);
    color: #333;
    font-size: 14px;
    appearance: none;
    -webkit-appearance: none;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-position: right 10px center;
    background-size: 16px;
    transition: border-color 0.2s ease;
  }

  .single-option-selector:hover, .single-option-selector:focus {
    border-color: #4a90e2;
    outline: none;
  }

  /* Add to cart button */
  .add-to-cart-container {
    margin-top: 20px;
  }

  .add-to-cart-button {
    width: 100%;
    padding: 12px;
    border: none;
    border-radius: 6px;
    background-color: #4a90e2;
    color: white;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    transition: background-color 0.2s ease, transform 0.1s ease;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .add-to-cart-button:hover {
    background-color: #3a7bc8;
    transform: translateY(-2px);
  }

  .add-to-cart-button:active {
    transform: translateY(0);
  }

  .add-to-cart-button.disabled {
    background-color: #cccccc;
    cursor: not-allowed;
  }

  /* Updated variant styling for side-by-side display */
  .variants-container {
    margin-top: 20px;
    display: flex;
    flex-direction: column;
    gap: 15px;
  }

  /* Adjust this to display variants in a row */
  .variants-container > div:first-child {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    gap: 15px;
  }

  .variant-option-group {
    display: flex;
    flex-direction: column;
    gap: 5px;
    min-width: 120px;
    flex: 1;
    margin-bottom: 15px;
  }

  .option-selector {
    width: 100%;
    max-width: 200px;
  }

  /* Responsive adjustments */
  @media (max-width: 480px) {
    .variants-container > div:first-child {
      flex-direction: column;
    }
    
    .option-selector {
      max-width: 100%;
    }
  }

  /* Description Box Styling */
  .description-box {
    margin-top: 40px;
    padding: 25px 30px;
    background-color: {{ section.settings.description_bg }};
    border-radius: 10px;
    border: 1px solid rgba(255, 255, 255, 0.1);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
  }

  .description-box h1, 
  .description-box h2, 
  .description-box h3, 
  .description-box h4, 
  .description-box h5, 
  .description-box h6 {
    color: #ffffff;
    margin-top: 25px;
    margin-bottom: 15px;
    font-weight: 600;
  }

  .description-box h1 { font-size: 24px; }
  .description-box h2 { font-size: 22px; }
  .description-box h3 { font-size: 20px; }
  .description-box h4 { font-size: 18px; }
  .description-box h5 { font-size: 16px; }
  .description-box h6 { font-size: 14px; }

  .description-box p {
    margin-bottom: 15px;
    line-height: 1.6;
    color: #D3D3D3;
  }

  .description-box ul, 
  .description-box ol {
    margin-bottom: 15px;
    padding-left: 25px;
    color: #D3D3D3;
  }

  .description-box li {
    margin-bottom: 8px;
    line-height: 1.5;
  }

  .description-box a {
    color: #4a90e2;
    text-decoration: none;
    transition: color 0.2s ease;
  }

  .description-box a:hover {
    color: #3a7bc8;
    text-decoration: underline;
  }

  .description-box img {
    max-width: 100%;
    height: auto;
    border-radius: 6px;
    margin: 15px 0;
    box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
  }

  .description-box blockquote {
    border-left: 4px solid #4a90e2;
    padding: 10px 20px;
    margin: 20px 0;
    font-style: italic;
    background-color: rgba(255, 255, 255, 0.05);
  }

  .description-box table {
    width: 100%;
    border-collapse: collapse;
    margin: 20px 0;
  }

  .description-box table th, 
  .description-box table td {
    padding: 10px;
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  .description-box table th {
    background-color: rgba(255, 255, 255, 0.1);
    font-weight: 600;
  }

  .description-box table tr:nth-child(even) {
    background-color: rgba(255, 255, 255, 0.03);
  }

  /* Add a title to the description box */
  .description-box::before {
    content: "{{ section.settings.description_title }}";
    display: block;
    font-size: 20px;
    font-weight: 700;
    margin-bottom: 20px;
    color: #ffffff;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    padding-bottom: 10px;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .description-box {
      padding: 20px;
      margin-top: 30px;
    }
    
    .description-box::before {
      font-size: 18px;
      margin-bottom: 15px;
    }
  }

  /* Add this to your existing styles */
  .product-container {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
    color: {{ section.settings.text_color }};
    --label-color: {{ section.settings.label_color }};
    --title-color: {{ section.settings.product_title_color }};
    --collection-color: {{ section.settings.collection_button_color }};
    --tag-color: {{ section.settings.tag_text_color }};
    --vendor-color: {{ section.settings.vendor_text_color }};
    --price-color: {{ section.settings.price_color }};
    --sale-price-color: {{ section.settings.sale_price_color }};
    --compare-price-color: {{ section.settings.compare_price_color }};
    --in-stock-color: {{ section.settings.in_stock_color }};
    --out-of-stock-color: {{ section.settings.out_of_stock_color }};
    --description-title-color: {{ section.settings.description_title_color }};
    --description-text-color: {{ section.settings.description_text_color }};
  }

  /* Update color references */
  .product-name {
    color: var(--title-color);
  }

  .info-label {
    color: var(--label-color);
  }

  .collection-btn a {
    color: var(--collection-color);
  }

  .tag-btn {
    color: var(--tag-color);
  }

  .vendor-name {
    color: var(--vendor-color);
  }

  .option-label, 
  .quantity-selector label {
    color: var(--label-color);
  }

  .current-price {
    color: var(--price-color);
  }

  .sale-price {
    color: var(--sale-price-color);
  }

  .compare-at-price {
    color: var(--compare-price-color);
  }

  .in-stock {
    color: var(--in-stock-color);
  }

  .out-of-stock {
    color: var(--out-of-stock-color);
  }

  /* Update description box styles */
  .description-box {
    color: var(--description-text-color);
  }

  .description-box::before {
    content: "{{ section.settings.description_title }}";
    color: var(--description-title-color);
  }

  .description-box h1, 
  .description-box h2, 
  .description-box h3, 
  .description-box h4, 
  .description-box h5, 
  .description-box h6 {
    color: var(--description-title-color);
  }

  .description-box p,
  .description-box ul,
  .description-box ol,
  .description-box li {
    color: var(--description-text-color);
  }

  /* Custom Tour Button Styling */
  .custom-tour-part {
    margin-top: 15px;
  }

  .custom-tour-button {
    display: block;
    width: 100%;
    padding: 10px 12px;
    background-color: rgba(255, 255, 255, 0.1);
    border: 1px solid #4a90e2;
    border-radius: 6px;
    color: #4a90e2;
    font-size: 14px;
    font-weight: 600;
    text-align: center;
    text-decoration: none;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    transition: all 0.25s ease;
  }

  .custom-tour-button:hover {
    background-color: rgba(74, 144, 226, 0.1);
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    text-decoration: none;
    color: #3a7bc8;
  }

  .custom-tour-button:active {
    transform: translateY(0);
  }

  /* Location and Map Styling */
  .location-map {
    margin: 15px 0;
    padding: 15px;
    background-color: rgba(255, 255, 255, 0.05);
    border-radius: 8px;
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  .location-name {
    display: flex;
    align-items: center;
    font-size: 16px;
    font-weight: 600;
    color: {{ section.settings.text_color }};
    margin-bottom: 10px;
  }

  .location-name i {
    margin-right: 8px;
    color: #4a90e2;
    font-size: 18px;
  }

  .google-map-location {
    width: 100%;
    overflow: hidden;
    transition: all 0.3s ease;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }

  .google-map-location:hover {
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
  }

  /* Responsive adjustments */
  @media (max-width: 767px) {
    .google-map-location iframe {
      height: 180px;
    }
  }
</style>

<script>
  let slideInterval;
  let currentSlideIndex = 0;
  const slideDuration = {{ section.settings.slide_duration | times: 1000 }}; 
  
  function changeMainImage(thumbnail, manualChange = true, direction = 'next') {
    const mainImage = document.getElementById('mainProductImage');
    const secondaryImage = document.getElementById('secondaryProductImage');
    const fullImageUrl = thumbnail.getAttribute('data-full-image');
    const thumbnailItems = document.querySelectorAll('.thumbnail-item');
    
    secondaryImage.src = fullImageUrl;
    secondaryImage.alt = thumbnail.alt;
    
    mainImage.classList.remove('slide-from-left', 'slide-from-right');
    secondaryImage.classList.remove('slide-from-left', 'slide-from-right');
    
    if (direction === 'next') {
      secondaryImage.classList.add('slide-from-right');
    } else if (direction === 'prev') {
      secondaryImage.classList.add('slide-from-left');
    }
    
    mainImage.classList.remove('current');
    mainImage.classList.add('next');
    secondaryImage.classList.remove('next');
    secondaryImage.classList.add('current');
    
    setTimeout(() => {
      const tempSrc = mainImage.src;
      const tempAlt = mainImage.alt;
      mainImage.src = secondaryImage.src;
      mainImage.alt = secondaryImage.alt;
      secondaryImage.src = tempSrc;
      secondaryImage.alt = tempAlt;
      
      mainImage.classList.remove('next');
      mainImage.classList.add('current');
      secondaryImage.classList.remove('current');
      secondaryImage.classList.add('next');
      
      secondaryImage.classList.remove('slide-from-left', 'slide-from-right');
    }, 800);
    
    thumbnailItems.forEach(item => {
      item.classList.remove('active');
    });
    
    thumbnail.parentElement.classList.add('active');
    currentSlideIndex = parseInt(thumbnail.parentElement.getAttribute('data-index'));
    
    if (manualChange && slideInterval) {
      clearInterval(slideInterval);
      startAutoSlide();
    }
  }
  
  function nextSlide() {
    const thumbnails = document.querySelectorAll('.thumbnail-item');
    if (thumbnails.length === 0) return;
    
    currentSlideIndex = (currentSlideIndex + 1) % thumbnails.length;
    const nextThumbnail = thumbnails[currentSlideIndex].querySelector('img');
    changeMainImage(nextThumbnail, false, 'next');
    
    scrollToThumbnail(thumbnails[currentSlideIndex]);
  }
  
  function prevSlide() {
    const thumbnails = document.querySelectorAll('.thumbnail-item');
    if (thumbnails.length === 0) return;
    
    currentSlideIndex = (currentSlideIndex - 1 + thumbnails.length) % thumbnails.length;
    const prevThumbnail = thumbnails[currentSlideIndex].querySelector('img');
    changeMainImage(prevThumbnail, false, 'prev');
    
    scrollToThumbnail(thumbnails[currentSlideIndex]);
  }
  
  function scrollToThumbnail(thumbnailElement) {
    const scrollContainer = document.querySelector('.thumbnails-scroll-container');
    if (!scrollContainer) return;
    
    const isVertical = window.innerWidth > 768;
    
    if (isVertical) {
      const containerTop = scrollContainer.scrollTop;
      const containerBottom = containerTop + scrollContainer.clientHeight;
      const elemTop = thumbnailElement.offsetTop;
      const elemBottom = elemTop + thumbnailElement.offsetHeight;
      
      if (elemTop < containerTop) {
        scrollContainer.scrollTop = elemTop;
      } else if (elemBottom > containerBottom) {
        scrollContainer.scrollTop = elemBottom - scrollContainer.clientHeight;
      }
    } else {
      const containerLeft = scrollContainer.scrollLeft;
      const containerRight = containerLeft + scrollContainer.clientWidth;
      const elemLeft = thumbnailElement.offsetLeft;
      const elemRight = elemLeft + thumbnailElement.offsetWidth;
      
      if (elemLeft < containerLeft) {
        scrollContainer.scrollLeft = elemLeft;
      } else if (elemRight > containerRight) {
        scrollContainer.scrollLeft = elemRight - scrollContainer.clientWidth;
      }
    }
  }
  
  function startAutoSlide() {
    if (document.querySelectorAll('.thumbnail-item').length <= 1) return;
    {% if section.settings.auto_slide %}
      slideInterval = setInterval(() => {
        nextSlide();
      }, slideDuration);
    {% endif %}
  }
  
  function toggleAutoSlide() {
    const toggleButton = document.getElementById('toggleAutoSlide');
    
    if (slideInterval) {
      clearInterval(slideInterval);
      slideInterval = null;
      toggleButton.innerHTML = '<i class="bi bi-play-fill"></i>';
      toggleButton.setAttribute('title', 'Start Auto Slide');
    } else {
      startAutoSlide();
      toggleButton.innerHTML = '<i class="bi bi-pause-fill"></i>';
      toggleButton.setAttribute('title', 'Pause Auto Slide');
    }
  }

  document.addEventListener('DOMContentLoaded', function() {
    const scrollContainer = document.querySelector('.thumbnails-scroll-container');
    const scrollUpButton = document.querySelector('.scroll-up');
    const scrollDownButton = document.querySelector('.scroll-down');
    
    if (scrollUpButton && scrollDownButton && scrollContainer) {
      scrollUpButton.addEventListener('click', function() {
        scrollContainer.scrollTop -= 100;
      });
      
      scrollDownButton.addEventListener('click', function() {
        scrollContainer.scrollTop += 100;
      });
    }
    
    startAutoSlide();
    
    const prevButton = document.getElementById('prevSlide');
    const nextButton = document.getElementById('nextSlide');
    const toggleButton = document.getElementById('toggleAutoSlide');
    
    if (prevButton) {
      prevButton.addEventListener('click', function() {
        prevSlide();
      });
    }
    
    if (nextButton) {
      nextButton.addEventListener('click', function() {
        nextSlide();
      });
    }
    
    if (toggleButton) {
      toggleButton.addEventListener('click', function() {
        toggleAutoSlide();
      });
    }
  });


  document.addEventListener('DOMContentLoaded', function() {
    const tagButtons = document.querySelectorAll('.tag-btn');
    
    tagButtons.forEach(button => {
      button.addEventListener('click', function() {
        const tagName = this.getAttribute('data-tag');
        
        this.classList.toggle('active');
      
        
        console.log(`Tag clicked: ${tagName}`);
        
      });
    });
  });

  document.addEventListener('DOMContentLoaded', function() {
    let productJson = {{ product | json }};
    let currentVariant = {{ product.selected_or_first_available_variant | json }};
    
    const optionSelectors = document.querySelectorAll('.single-option-selector');
    const productSelect = document.getElementById('productSelect');
    const productPrice = document.getElementById('productPrice');
    const productAvailability = document.getElementById('productAvailability');
    const continueToBooking = document.getElementById('continueToBooking');
    
    optionSelectors.forEach(selector => {
      selector.addEventListener('change', function() {
        updateVariantSelection();
      });
    });
    
    const quantityInput = document.querySelector('.quantity-input');
    const increaseBtn = document.querySelector('.quantity-btn.increase');
    const decreaseBtn = document.querySelector('.quantity-btn.decrease');
    
    if (increaseBtn) {
      increaseBtn.addEventListener('click', function() {
        quantityInput.value = parseInt(quantityInput.value) + 1;
      });
    }
    
    if (decreaseBtn) {
      decreaseBtn.addEventListener('click', function() {
        const currentVal = parseInt(quantityInput.value);
        if (currentVal > 1) {
          quantityInput.value = currentVal - 1;
        }
      });
    }
    
    if (continueToBooking) {
      continueToBooking.addEventListener('click', function() {
        if (!currentVariant.available) return;
        
        const quantity = parseInt(quantityInput.value);
        addToCart(currentVariant.id, quantity);
      });
    }
    
    function updateVariantSelection() {
      let selectedOptions = [];
      optionSelectors.forEach(selector => {
        selectedOptions.push(selector.value);
      });
      
      let selectedVariant = null;
      
      for (let i = 0; i < productJson.variants.length; i++) {
        const variant = productJson.variants[i];
        let optionMatches = true;
        
        for (let j = 0; j < selectedOptions.length; j++) {
          const option = `option${j+1}`;
          if (variant[option] !== selectedOptions[j]) {
            optionMatches = false;
            break;
          }
        }
        
        if (optionMatches) {
          selectedVariant = variant;
          break;
        }
      }
      
      if (selectedVariant) {
        currentVariant = selectedVariant;
        updateProductUI(selectedVariant);
        
        if (history.replaceState) {
          const newUrl = window.location.pathname + '?variant=' + selectedVariant.id;
          window.history.replaceState({path: newUrl}, '', newUrl);
        }
      }
    }
    
    function updateProductUI(variant) {
      productSelect.value = variant.id;
      
      if (variant.compare_at_price > variant.price) {
        productPrice.innerHTML = `
          <span class="sale-price" data-regular-price="${variant.price}">${formatMoney(variant.price)}</span>
          <span class="compare-at-price" data-compare-price="${variant.compare_at_price}">${formatMoney(variant.compare_at_price)}</span>
          <span class="discount-badge">
            Save ${Math.round((variant.compare_at_price - variant.price) / variant.compare_at_price * 100)}%
          </span>
        `;
      } else {
        productPrice.innerHTML = `
          <span data-regular-price="${variant.price}">${formatMoney(variant.price)}</span>
        `;
      }
      
      if (variant.available) {
        productAvailability.innerHTML = '<span class="in-stock">In Stock</span>';
        continueToBooking.classList.remove('disabled');
        continueToBooking.disabled = false;
        continueToBooking.textContent = 'Add to Cart';
      } else {
        productAvailability.innerHTML = '<span class="out-of-stock">Out of Stock</span>';
        continueToBooking.classList.add('disabled');
        continueToBooking.disabled = true;
        continueToBooking.textContent = 'Sold Out';
      }
    }
    
    function formatMoney(cents) {
      if (typeof Shopify !== 'undefined' && Shopify.formatMoney) {
        return Shopify.formatMoney(cents, {{ shop.money_format | json }});
      } else {
        try {
          const formatString = {{ shop.money_with_currency_format | json }};
          
          const formattedAmount = (cents / 100).toFixed(2);
          
          return formatString.replace(/\{\{\s*amount\s*\}\}/g, formattedAmount);
        } catch (e) {
          return 'TK ' + (cents / 100).toFixed(2);
        }
      }
    }
    
    function addToCart(variantId, quantity) {
      fetch('/cart/add.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          id: variantId,
          quantity: quantity
        })
      })
      .then(response => response.json())
      .then(data => {
        console.log('Added to cart:', data);
        
        alert('Product added to cart!');
      })
      .catch(error => {
        console.error('Error adding to cart:', error);
        alert('Could not add to cart. Please try again.');
      });
    }

    if (continueToBooking) {
      continueToBooking.addEventListener('click', function() {
        if (!currentVariant.available) return;
        
        const quantity = quantityInput ? parseInt(quantityInput.value) : 1;
        
        redirectToBookingForm(currentVariant.id, quantity);
      });
    }

    function redirectToBookingForm(variantId, quantity) {
      const bookingUrl = `/pages/booking?variant_id=${variantId}&quantity=${quantity}`;
      
      try {
        sessionStorage.setItem('booking_product', JSON.stringify({
          product_title: productJson.title,
          product_id: productJson.id,
          variant_id: variantId,
          variant_title: currentVariant.title,
          price: currentVariant.price,
          image: productJson.featured_image,
          quantity: quantity
        }));
      } catch (e) {
        console.error('Error storing product data', e);
      }
      
      window.location.href = bookingUrl;
    }
  });
</script>

{% schema %}
{
  "name": "Product Page",
  "settings": [
    {
      "type": "header",
      "content": "Layout Settings"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background Color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Main Text Color",
      "default": "#333333"
    },
    {
      "type": "header",
      "content": "Product Title"
    },
    {
      "type": "color",
      "id": "product_title_color",
      "label": "Product Title Color",
      "default": "#1E1B1B"
    },
    {
      "type": "header",
      "content": "Collections & Tags"
    },
    {
      "type": "color",
      "id": "label_color",
      "label": "Label Text Color (Collections, Tags, Vendor)",
      "default": "#a0a0a0"
    },
    {
      "type": "color",
      "id": "collection_button_color",
      "label": "Collection Button Color",
      "default": "#4a90e2"
    },
    {
      "type": "color",
      "id": "tag_text_color",
      "label": "Tag Text Color",
      "default": "#630b0b"
    },
    {
      "type": "color",
      "id": "vendor_text_color",
      "label": "Vendor Name Color",
      "default": "#151414"
    },
    {
      "type": "header",
      "content": "Price & Availability"
    },
    {
      "type": "color",
      "id": "price_color",
      "label": "Regular Price Color",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "sale_price_color",
      "label": "Sale Price Color",
      "default": "#4CAF50"
    },
    {
      "type": "color",
      "id": "compare_price_color",
      "label": "Compare-at Price Color",
      "default": "#a0a0a0"
    },
    {
      "type": "color",
      "id": "in_stock_color",
      "label": "In Stock Text Color",
      "default": "#4CAF50"
    },
    {
      "type": "color",
      "id": "out_of_stock_color",
      "label": "Out of Stock Text Color",
      "default": "#F44336"
    },
    {
      "type": "header",
      "content": "Image Gallery Settings"
    },
    {
      "type": "range",
      "id": "slide_duration",
      "min": 1,
      "max": 10,
      "step": 1,
      "default": 3,
      "label": "Slideshow Duration (seconds)"
    },
    {
      "type": "checkbox",
      "id": "auto_slide",
      "label": "Enable Auto Slideshow",
      "default": true
    },
    {
      "type": "header",
      "content": "Product Information"
    },
    {
      "type": "checkbox",
      "id": "show_vendor",
      "label": "Show vendor",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_collections",
      "label": "Show collections",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_tags",
      "label": "Show product tags",
      "default": true
    },
    {
      "type": "header",
      "content": "Description Settings"
    },
    {
      "type": "text",
      "id": "description_title",
      "label": "Description Title",
      "default": "Product Description"
    },
    {
      "type": "color",
      "id": "description_bg",
      "label": "Description Background",
      "default": "rgba(255, 255, 255, 0.05)"
    },
    {
      "type": "color",
      "id": "description_title_color",
      "label": "Description Title Color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "description_text_color",
      "label": "Description Text Color",
      "default": "#D3D3D3"
    }
  ],
  "presets": [
    {
      "name": "Product Page",
      "category": "Product"
    }
  ]
}
{% endschema %}