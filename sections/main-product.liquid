<div class="product-container">
  <div class="image-plus-info">
    <div class="product-gallery-container">
      <div class="main-image-container">
        {% if product.featured_image %}
          <div class="image-wrapper">
            <img 
              id="mainProductImage" 
              src="{{ product.featured_image | img_url: '800x' }}" 
              alt="{{ product.featured_image.alt | escape }}"
              class="main-product-image current"
            >
            <img 
              id="secondaryProductImage" 
              src="{{ product.featured_image | img_url: '800x' }}" 
              alt="{{ product.featured_image.alt | escape }}"
              class="main-product-image next"
            >
          </div>
          
          {% if product.images.size > 1 %}
            <div class="gallery-navigation">
              <button id="prevSlide" class="nav-button prev" aria-label="Previous image">
                <i class="bi bi-chevron-left"></i>
              </button>
              <button id="toggleAutoSlide" class="nav-button toggle" aria-label="Toggle slideshow" title="Pause Auto Slide">
                <i class="bi bi-pause-fill"></i>
              </button>
              <button id="nextSlide" class="nav-button next" aria-label="Next image">
                <i class="bi bi-chevron-right"></i>
              </button>
            </div>
          {% endif %}
        {% else %}
          <div class="no-image-placeholder">
            <span>No image available</span>
          </div>
        {% endif %}
      </div>
      
      {% if product.images.size > 1 %}
        <div class="thumbnails-container">
          <div class="thumbnails-scroll-container">
            {% for image in product.images %}
              <div class="thumbnail-item {% if forloop.first %}active{% endif %}" data-index="{{ forloop.index0 }}">
                <img 
                  src="{{ image | img_url: '150x' }}" 
                  alt="{{ image.alt | escape }}"
                  data-full-image="{{ image | img_url: '800x' }}"
                  class="thumbnail-image"
                  onclick="changeMainImage(this)"
                >
              </div>
            {% endfor %}
          </div>
          
          {% if product.images.size > 4 %}
            <div class="thumbnail-controls">
              <button class="thumbnail-scroll-btn scroll-up" aria-label="Scroll up">
                <i class="bi bi-chevron-up"></i>
              </button>
              <button class="thumbnail-scroll-btn scroll-down" aria-label="Scroll down">
                <i class="bi bi-chevron-down"></i>
              </button>
            </div>
          {% endif %}
        </div>
      {% endif %}
      <div class="vertical-divider"></div>
    </div>

    
    <div class="product-info-container">
      <div class="essential-info">
        <div class="product-name">
          {{ product.title }}
        </div>
        {% if product.collections %}
          <div class="product-collections">
            <div class="collection-buttons">
              <span class="info-label">Collections:</span>
              {% for collection in product.collections %}
                <button class="collection-btn">
                  <a href="{{ collection.url }}">{{ collection.title }}</a>
                </button>
              {% endfor %}
            </div>
          </div>
        {% endif %}
        {% if product.tags %}
          <div class="product-tags">
            <div class="tag-buttons">
             <span class="info-label">Tags:</span>
              {% for tag in product.tags %}
                <button class="tag-btn" data-tag="{{ tag.name | handle }}">
                  {{ tag }}
                </button>
              {% endfor %}
            </div>
          </div>
        {% endif %}
        {% if product.vendor %}
          <div class="product-vendor">
            <span class="info-label">From:</span> 
            <span class="vendor-name">{{ product.vendor }}</span>
          </div>
        {% endif %}
        
        <div class="price-section">
          <div class="current-price">
            {% if product.compare_at_price_max > product.price %}
              <span class="sale-price">{{ product.price | money }}</span>
              <span class="compare-at-price">{{ product.compare_at_price | money }}</span>
              <span class="discount-badge">
                {% assign savings = product.compare_at_price_max | minus: product.price | times: 100 | divided_by: product.compare_at_price_max %}
                Save {{ savings }}%
              </span>
            {% else %}
              <span>{{ product.price | money }}</span>
            {% endif %}
          </div>
          
          <div class="availability">
            {% if product.available %}
              <span class="in-stock">In Stock</span>
            {% else %}
              <span class="out-of-stock">Out of Stock</span>
            {% endif %}
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .product-container {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
    color: #D3D3D3;
  }
  
  .image-plus-info {
    display: flex;
    flex-wrap: wrap;
    gap: 30px;
  }
  
  /* Product Gallery */
  .product-gallery-container {
    flex: 1;
    min-width: 300px;
    max-width: 50%;
    display: flex;
    gap: 15px;
    position: relative;
  }
  
  /* Main Image */
  .main-image-container {
    position: relative;
    flex-grow: 1;
    width: calc(100% - 95px);
    height: 500px;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    border-radius: 8px;
    background-color: #f8f8f8;
  }
  
  .main-product-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: opacity 0.5s ease, transform 0.5s ease;
  }
  
  .main-product-image.fade-out {
    opacity: 0;
    transform: scale(0.95);
  }
  
  .main-product-image.fade-in {
    opacity: 1;
    transform: scale(1);
  }
  
  .main-product-image:hover {
    transform: scale(1.05);
  }
  
  .no-image-placeholder {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #f0f0f0;
    color: #888;
    font-size: 16px;
  }
  
  /* Thumbnails */
  .thumbnails-container {
    width: 80px;
    position: relative;
  }
  
  .thumbnails-scroll-container {
    height: 500px;
    overflow-y: auto;
    scrollbar-width: none; /* Hide scrollbar for Firefox */
    -ms-overflow-style: none; /* Hide scrollbar for IE and Edge */
    padding-right: 5px;
    display: flex;
    flex-direction: column;
    gap: 10px;
  }
  
  /* Hide scrollbar for Chrome, Safari and Opera */
  .thumbnails-scroll-container::-webkit-scrollbar {
    display: none;
  }
  
  .thumbnail-item {
    width: 80px;
    height: 80px;
    border-radius: 4px;
    overflow: hidden;
    cursor: pointer;
    opacity: 0.7;
    transition: opacity 0.2s ease, border 0.2s ease;
    border: 2px solid transparent;
  }
  
  .thumbnail-item:hover {
    opacity: 0.9;
  }
  
  .thumbnail-item.active {
    opacity: 1;
    border: 2px solid #4a90e2;
  }
  
  .thumbnail-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  .thumbnail-controls {
    position: absolute;
    right: 0;
    top: 0;
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    padding: 10px 0;
  }
  
  .thumbnail-scroll-btn {
    width: 24px;
    height: 24px;
    border-radius: 50%;
    background-color: rgba(255, 255, 255, 0.8);
    border: 1px solid #ddd;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }
  
  .thumbnail-scroll-btn:hover {
    background-color: rgba(255, 255, 255, 1);
  }
  
  /* Gallery Navigation */
  .gallery-navigation {
    position: absolute;
    bottom: 15px;
    left: 0;
    right: 0;
    display: flex;
    justify-content: center;
    gap: 10px;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .main-image-container:hover .gallery-navigation {
    opacity: 1;
  }

  .nav-button {
    width: 36px;
    height: 36px;
    border-radius: 50%;
    border: none;
    background-color: rgba(255, 255, 255, 0.7);
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }

  .nav-button:hover {
    background-color: rgba(255, 255, 255, 0.9);
  }

  .nav-button i {
    font-size: 18px;
    color: #333;
  }
  
  /* Product Info */
  .product-info-container {
    flex: 1;
    min-width: 300px;
    padding: 0 10px;
  }
  
  /* Responsive Design */
  @media (max-width: 768px) {
    .image-plus-info {
      flex-direction: column;
    }
    
    .product-gallery-container {
      max-width: 100%;
      flex-direction: column-reverse;
      margin-bottom: 20px;
    }
    
    .main-image-container {
      width: 100%;
      height: 350px;
    }
    
    .thumbnails-container {
      width: 100%;
      height: auto;
      margin-bottom: 15px;
    }
    
    .thumbnails-scroll-container {
      height: auto;
      flex-direction: row;
      overflow-x: auto;
      overflow-y: hidden;
      height: 80px;
      padding-bottom: 5px;
    }
    
    .thumbnail-controls {
      height: auto;
      width: 100%;
      flex-direction: row;
      top: auto;
      bottom: 50%;
      transform: translateY(50%);
      padding: 0 10px;
    }
    
    .scroll-up {
      transform: rotate(-90deg);
    }
    
    .scroll-down {
      transform: rotate(-90deg);
    }

    .product-info-container {
      padding: 0;
    }
    
    .price-section {
      flex-direction: column;
      align-items: flex-start;
      gap: 10px;
    }
    
    .current-price {
      margin-bottom: 10px;
    }
  }

  /* Add these styles for the crossfade effect */
  .image-wrapper {
    position: relative;
    width: 100%;
    height: 100%;
  }

  .main-product-image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: opacity 0.8s ease, transform 0.8s ease;
  }

  .main-product-image.current {
    opacity: 1;
    z-index: 2;
  }

  .main-product-image.next {
    opacity: 0;
    z-index: 1;
  }

  /* Animation for slide transitions */
  @keyframes slideInFromRight {
    0% {
      transform: translateX(20px);
      opacity: 0;
    }
    100% {
      transform: translateX(0);
      opacity: 1;
    }
  }

  @keyframes slideInFromLeft {
    0% {
      transform: translateX(-20px);
      opacity: 0;
    }
    100% {
      transform: translateX(0);
      opacity: 1;
    }
  }

  .slide-from-right {
    animation: slideInFromRight 0.5s forwards;
  }

  .slide-from-left {
    animation: slideInFromLeft 0.5s forwards;
  }

  .vertical-divider {
    width: 1px;
    background-color: #e0e0e0;
    margin: 0 15px;
    align-self: stretch;
    opacity: 0.7;
    box-shadow: 0px 0px 2px rgba(0, 0, 0, 0.1);
  }

  /* Product Info Styles */
  .essential-info {
    display: flex;
    flex-direction: column;
    gap: 15px;
  }

  .product-name {
    font-size: 28px;
    font-weight: 700;
    color: #ffffff;
    margin-bottom: 5px;
    letter-spacing: 0.5px;
    line-height: 1.2;
  }

  .info-label {
    font-size: 14px;
    color: #d0d0d0;
    font-weight: 600;
    margin-right: 10px;
  }

  /* Collection buttons styling */
  .product-collections, .product-tags {
    margin-bottom: 10px;
  }

  .collection-buttons, .tag-buttons {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
    margin-top: 8px;
  }

  .collection-btn, .tag-btn {
    padding: 6px 12px;
    border-radius: 20px;
    font-size: 13px;
    transition: all 0.2s ease;
    cursor: pointer;
    border: 1px solid rgba(255, 255, 255, 0.2);
    background-color: rgba(255, 255, 255, 0.1);
  }

  .collection-btn {
    background-color: rgba(74, 144, 226, 0.4);
    border: 1px solid rgba(74, 144, 226, 0.6);
  }

  .collection-btn:hover {
    background-color: rgba(74, 144, 226, 0.5);
    transform: translateY(-2px);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  }

  .tag-btn {
    background-color: rgba(255, 192, 203, 0.3);
    border: 1px solid rgba(255, 192, 203, 0.5);
    color: #ffffff;
    font-weight: 500;
  }

  .tag-btn:hover {
    background-color: rgba(255, 192, 203, 0.5);
    transform: translateY(-2px);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  }

  .collection-btn a {
    color: #88bbff;
    font-weight: 500;
    text-decoration: none;
  }

  .product-vendor {
    margin-top: 5px;
    font-size: 15px;
    background-color: rgba(255, 255, 255, 0.1);
    display: inline-block;
    padding: 5px 12px;
    border-radius: 6px;
    border-left: 3px solid #4CAF50;
  }

  .vendor-name {
    font-weight: 600;
    color: #4CAF50;
  }

  /* Price section styling */
  .price-section {
    margin-top: 15px;
    padding: 15px 0;
    border-top: 1px solid rgba(255, 255, 255, 0.1);
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .current-price {
    font-size: 24px;
    font-weight: 700;
    color: #ffffff;
    display: flex;
    align-items: center;
    gap: 10px;
    flex-wrap: wrap;
  }

  .sale-price {
    color: #4CAF50;
  }

  .compare-at-price {
    text-decoration: line-through;
    color: #a0a0a0;
    font-size: 18px;
  }

  .discount-badge {
    background-color: #4CAF50;
    color: white;
    padding: 3px 8px;
    border-radius: 12px;
    font-size: 12px;
    font-weight: 600;
  }

  .availability {
    font-size: 14px;
    font-weight: 600;
  }

  .in-stock {
    color: #4CAF50;
  }

  .out-of-stock {
    color: #F44336;
  }

  /* Add this to your style section */
  .tag-btn.active {
    background-color: rgba(255, 192, 203, 0.7);
    border-color: rgba(255, 255, 255, 0.7);
    transform: scale(1.05);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
  }
</style>

<script>
  let slideInterval;
  let currentSlideIndex = 0;
  const slideDuration = 3000; 
  
  // Replace your changeMainImage function with this enhanced version
  function changeMainImage(thumbnail, manualChange = true, direction = 'next') {
    const mainImage = document.getElementById('mainProductImage');
    const secondaryImage = document.getElementById('secondaryProductImage');
    const fullImageUrl = thumbnail.getAttribute('data-full-image');
    const thumbnailItems = document.querySelectorAll('.thumbnail-item');
    
    // Switch images for crossfade
    secondaryImage.src = fullImageUrl;
    secondaryImage.alt = thumbnail.alt;
    
    // Remove any existing animation classes
    mainImage.classList.remove('slide-from-left', 'slide-from-right');
    secondaryImage.classList.remove('slide-from-left', 'slide-from-right');
    
    // Add directional slide animation
    if (direction === 'next') {
      secondaryImage.classList.add('slide-from-right');
    } else if (direction === 'prev') {
      secondaryImage.classList.add('slide-from-left');
    }
    
    // Swap z-indices to bring secondary image to front
    mainImage.classList.remove('current');
    mainImage.classList.add('next');
    secondaryImage.classList.remove('next');
    secondaryImage.classList.add('current');
    
    // Swap the image references after animation completes
    setTimeout(() => {
      // Swap image sources
      const tempSrc = mainImage.src;
      const tempAlt = mainImage.alt;
      mainImage.src = secondaryImage.src;
      mainImage.alt = secondaryImage.alt;
      secondaryImage.src = tempSrc;
      secondaryImage.alt = tempAlt;
      
      // Swap classes back
      mainImage.classList.remove('next');
      mainImage.classList.add('current');
      secondaryImage.classList.remove('current');
      secondaryImage.classList.add('next');
      
      // Remove animation classes
      secondaryImage.classList.remove('slide-from-left', 'slide-from-right');
    }, 800);
    
    // Update active thumbnail
    thumbnailItems.forEach(item => {
      item.classList.remove('active');
    });
    
    thumbnail.parentElement.classList.add('active');
    currentSlideIndex = parseInt(thumbnail.parentElement.getAttribute('data-index'));
    
    // If manually changed, reset the auto slide timer
    if (manualChange && slideInterval) {
      clearInterval(slideInterval);
      startAutoSlide();
    }
  }
  
  // Update nextSlide function to indicate direction
  function nextSlide() {
    const thumbnails = document.querySelectorAll('.thumbnail-item');
    if (thumbnails.length === 0) return;
    
    currentSlideIndex = (currentSlideIndex + 1) % thumbnails.length;
    const nextThumbnail = thumbnails[currentSlideIndex].querySelector('img');
    changeMainImage(nextThumbnail, false, 'next');
    
    scrollToThumbnail(thumbnails[currentSlideIndex]);
  }
  
  // Update prevSlide function to indicate direction
  function prevSlide() {
    const thumbnails = document.querySelectorAll('.thumbnail-item');
    if (thumbnails.length === 0) return;
    
    currentSlideIndex = (currentSlideIndex - 1 + thumbnails.length) % thumbnails.length;
    const prevThumbnail = thumbnails[currentSlideIndex].querySelector('img');
    changeMainImage(prevThumbnail, false, 'prev');
    
    scrollToThumbnail(thumbnails[currentSlideIndex]);
  }
  
  function scrollToThumbnail(thumbnailElement) {
    const scrollContainer = document.querySelector('.thumbnails-scroll-container');
    if (!scrollContainer) return;
    
    const isVertical = window.innerWidth > 768;
    
    if (isVertical) {
      const containerTop = scrollContainer.scrollTop;
      const containerBottom = containerTop + scrollContainer.clientHeight;
      const elemTop = thumbnailElement.offsetTop;
      const elemBottom = elemTop + thumbnailElement.offsetHeight;
      
      if (elemTop < containerTop) {
        scrollContainer.scrollTop = elemTop;
      } else if (elemBottom > containerBottom) {
        scrollContainer.scrollTop = elemBottom - scrollContainer.clientHeight;
      }
    } else {
      const containerLeft = scrollContainer.scrollLeft;
      const containerRight = containerLeft + scrollContainer.clientWidth;
      const elemLeft = thumbnailElement.offsetLeft;
      const elemRight = elemLeft + thumbnailElement.offsetWidth;
      
      if (elemLeft < containerLeft) {
        scrollContainer.scrollLeft = elemLeft;
      } else if (elemRight > containerRight) {
        scrollContainer.scrollLeft = elemRight - scrollContainer.clientWidth;
      }
    }
  }
  
  function startAutoSlide() {
    if (document.querySelectorAll('.thumbnail-item').length <= 1) return;
    
    slideInterval = setInterval(() => {
      nextSlide();
    }, slideDuration);
  }
  
  function toggleAutoSlide() {
    const toggleButton = document.getElementById('toggleAutoSlide');
    
    if (slideInterval) {
      clearInterval(slideInterval);
      slideInterval = null;
      toggleButton.innerHTML = '<i class="bi bi-play-fill"></i>';
      toggleButton.setAttribute('title', 'Start Auto Slide');
    } else {
      startAutoSlide();
      toggleButton.innerHTML = '<i class="bi bi-pause-fill"></i>';
      toggleButton.setAttribute('title', 'Pause Auto Slide');
    }
  }

  document.addEventListener('DOMContentLoaded', function() {
    const scrollContainer = document.querySelector('.thumbnails-scroll-container');
    const scrollUpButton = document.querySelector('.scroll-up');
    const scrollDownButton = document.querySelector('.scroll-down');
    
    if (scrollUpButton && scrollDownButton && scrollContainer) {
      scrollUpButton.addEventListener('click', function() {
        scrollContainer.scrollTop -= 100;
      });
      
      scrollDownButton.addEventListener('click', function() {
        scrollContainer.scrollTop += 100;
      });
    }
    
    startAutoSlide();
    
    const prevButton = document.getElementById('prevSlide');
    const nextButton = document.getElementById('nextSlide');
    const toggleButton = document.getElementById('toggleAutoSlide');
    
    if (prevButton) {
      prevButton.addEventListener('click', function() {
        prevSlide();
      });
    }
    
    if (nextButton) {
      nextButton.addEventListener('click', function() {
        nextSlide();
      });
    }
    
    if (toggleButton) {
      toggleButton.addEventListener('click', function() {
        toggleAutoSlide();
      });
    }
  });

  // Add this to your existing script section

  document.addEventListener('DOMContentLoaded', function() {
    // Tag button click handler
    const tagButtons = document.querySelectorAll('.tag-btn');
    
    tagButtons.forEach(button => {
      button.addEventListener('click', function() {
        const tagName = this.getAttribute('data-tag');
        
        // Toggle active state for visual feedback
        this.classList.toggle('active');
      
        
        console.log(`Tag clicked: ${tagName}`);
        
      });
    });
  });
</script>