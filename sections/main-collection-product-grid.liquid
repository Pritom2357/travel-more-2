{%- assign product_limit = section.settings.product_per_page -%}
{%- assign show_second_img = section.settings.show_second_img -%}
{%- assign show_vendor = section.settings.show_vendor -%}
{%- assign enable_filtering = section.settings.enable_filtering -%}

{% liquid
  case section.settings.number_of_col
    when 2
      assign column_desk = 'col-lg-6 col-md-6 col-sm-12'
    when 3
      assign column_desk = 'col-lg-4 col-md-4 col-sm-12'
    when 4
      assign column_desk = 'col-lg-3 col-md-3 col-sm-12'
    when 6
      assign column_desk = 'col-lg-2 col-md-2 col-sm-12'
    else
      assign column_desk = 'col-lg-4 col-md-4 col-sm-12'
  endcase
%}

<div class="{%- if enable_filtering -%}container-fluid {%- else %} container{%- endif -%}">
  <div class="row d-flex">
    {% if enable_filtering %}
      <div class="col-auto col-md-3 col-xl-2 px-sm-2 px-0 bg-white">
        {% render 'collection-filter', collection: collection %}
      </div>
      <div class="collection-backdrop"></div>
    {% endif %}
    <div class="col py-3">
      <!-- Add this after opening the collection content div -->
      {% if enable_filtering %}
        <div class="filter-toggle-container d-block d-lg-none mb-3">
          <button class="btn btn-outline-secondary filter-toggle">
            <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
              <path d="M1.5 1.5A.5.5 0 0 1 2 1h12a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.128.334L10 8.692V13.5a.5.5 0 0 1-.342.474l-3 1A.5.5 0 0 1 6 14.5V8.692L1.628 3.834A.5.5 0 0 1 1.5 3.5v-2z"/>
            </svg>
            Show Filters
          </button>
        </div>
      {% endif %}
      <div class="collection-header">
        <div class="d-flex justify-content-between">
          <div class="product-counter">
            <h3 class="heading">{{ collection.title | escape }}</h3>
            {% if collection.description != blank %}
              <div class="collection-description">{{ collection.description }}</div>
            {% endif %}
          </div>
          <div class="sort-by--container">
            <div class="d-flex">
              <label>Product Sort</label>
              <select id="sort-by" class="sort-by form-control from-control-sm">
                {% for option in collection.sort_options %}
                  <option
                    value="{{ option.value }}"
                    {% if option.value == collection.sort_by %}
                      selected
                    {% endif %}
                  >
                    {{ option.name }}
                  </option>
                {% endfor %}
              </select>
            </div>
          </div>
        </div>
      </div>
      <div class="filter-heading">
        <p>Total products: ({{ collection.all_products_count }})</p>
      </div>
      <div class="collection-products my-3">
        {% paginate collection.products by product_limit -%}
          <div class="row">
            {% for product in collection.products %}
              {%- render 'product-card',
                product: product,
                column: column_desk,
                show_second_img: show_second_img,
                show_vendor: show_vendor
              -%}
            {% endfor %}
          </div>

          <div class="pagination justify-content-center mt-5">
            {% render 'pagination', paginate: paginate %}
          </div>
        {% endpaginate %}
      </div>
    </div>
  </div>
</div>

<script>
  Shopify.queryParams = {};
  if(location.search.length){
    for(let keyValue, i=0, queries = location.search.substr(1).split('&'); i < queries.length; i++){
      keyValue = queries[i].split('=');
      if(keyValue.length > 1){
        Shopify.queryParams[decodeURIComponent(keyValue[0])] = decodeURIComponent(keyValue[1]);
      }
    }
  }

  document.querySelector('.sort-by').addEventListener('change', function(e) {
    let value = e.currentTarget.value;
    Shopify.queryParams.sort_by = value;
    location.search = new URLSearchParams(Shopify.queryParams).toString();
  });

  document.addEventListener('DOMContentLoaded', function() {
    const filterToggle = document.querySelector('.filter-toggle');
    const filterClose = document.querySelector('.btn-close-filters');
    const collectionFilter = document.querySelector('.collection-filter');
    const backdrop = document.querySelector('.collection-backdrop');
    
    if (filterToggle && collectionFilter && backdrop) {
      filterToggle.addEventListener('click', function() {
        collectionFilter.classList.add('active');
        backdrop.classList.add('active');
        document.body.style.overflow = 'hidden';
      });
    }
    
    if (filterClose && collectionFilter && backdrop) {
      filterClose.addEventListener('click', function() {
        collectionFilter.classList.remove('active');
        backdrop.classList.remove('active');
        document.body.style.overflow = '';
      });
    }
    
    if (backdrop && collectionFilter) {
      backdrop.addEventListener('click', function() {
        collectionFilter.classList.remove('active');
        backdrop.classList.remove('active');
        document.body.style.overflow = '';
      });
    }
    
    // Initialize Bootstrap collapse if available
    if (typeof bootstrap !== 'undefined') {
      const filterGroups = document.querySelectorAll('.filter-group-header[data-bs-toggle="collapse"]');
      filterGroups.forEach(group => {
        new bootstrap.Collapse(document.querySelector(group.dataset.bsTarget), {
          toggle: false
        });
      });
    }
  });
</script>

<style>
    /* Collection Chooser Styles */

  /* Dropdown Selector */
  .collection-chooser select {
    width: 100%;
    padding: 0.375rem 0.75rem;
    border: 1px solid #ced4da;
    border-radius: 0.25rem;
  }

  .collection-chooser label {
    font-weight: bold;
  }

  /* Radio Buttons */
  .collection-chooser .form-check {
    margin-bottom: 0.5rem;
  }

  .collection-chooser .form-check-input:checked ~ .form-check-label {
    font-weight: bold;
    color: #0d6efd; /* Bootstrap primary color */
  }

  /* Color Swatches (if using color filter) */
  .color-swatch {
    display: inline-block;
    width: 24px;
    height: 24px;
    border-radius: 50%;
    border: 2px solid #ddd;
    cursor: pointer;
    transition: transform 0.2s, border 0.2s;
  }

  .color-swatch:hover {
    transform: scale(1.1);
    border: 2px solid #000;
  }

  .form-check-input:checked + .color-swatch {
    box-shadow: 0 0 0 2px #0d6efd;
  }

  /* Accordion Styles */
  .accordion-button:not(.collapsed) {
    color: #0d6efd;
    background-color: #e7f1ff;
  }

  .accordion-button::after {
    transition: transform 0.2s;
  }

  .accordion-button.collapsed::after {
    transform: rotate(-90deg);
  }

  /* Apply Button Styling */
  .filter-group-display__submit {
    margin-top: 10px;
  }

  .filter-group-display__submit .btn {
    width: 100%;
  }

  /* Filter toggle styling */
  .filter-toggle-container {
    margin-bottom: 15px;
  }
  
  .filter-toggle {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 8px 12px;
  }
  
  /* Backdrop and mobile filter styling */
  .collection-backdrop {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0,0.5);
    z-index: 1040;
    display: none;
  }
  
  .collection-backdrop.active {
    display: block;
  }
  
  @media (max-width: 991px) {
    .collection-filter {
      position: fixed;
      top: 0;
      left: 0;
      width: 85%;
      height: 100%;
      z-index: 1050;
      background-color: white;
      overflow-y: auto;
      transform: translateX(-100%);
      transition: transform 0.3s ease;
      box-shadow: 0 0 15px rgba(0,0,0,0.2);
      padding: 20px;
    }
    
    .collection-filter.active {
      transform: translateX(0);
    }
  }
</style>

{% schema %}
{
  "name": "Collection template",
  "settings": [
    {
      "type":"header",
      "content": "product settings"
    },
    {
      "type": "range",
      "id": "product_per_page",
      "label": "Product per page",
      "min": 4,
      "max": 24,
      "step": 2,
      "default": 12
    },
    {
      "type": "range",
      "id": "number_of_col",
      "label": "Number of column on Desktop",
      "min": 2,
      "max": 6,
      "step": 1,
      "default": 3
    },
    {
      "type": "header",
      "content": "Product Card"
    },
    {
      "type": "checkbox",
      "id": "show_second_img",
      "label": "Show second image on hover",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "show_vendor",
      "label": "Show vendor",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "enable_filtering",
      "label": "Enable Filtering",
      "default": true
    }
  ]
}
{% endschema %}
