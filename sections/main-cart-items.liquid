<div class="cart-page" id="{{ section.id }}">
  <div class="cart-heading p-4 mb-4">
    <div class="header bg-dark d-flex align-items-center justify-content-center">
      <h3 class="text-light">{{ 'cart.title' | t }}</h3>
    </div>
  </div>
  <div class="container my-6">
    <form action="{{ routes.cart_url }}" method="post" id="cart">
      <div class="row">
        <div class="col-md-9">
          <div class="card-table">
            <table class="table table-responsive">
              <thead>
                <tr>
                  <th>{{ 'cart.label.product_info' | t }}</th>
                  <th>{{ 'cart.label.price' | t }}</th>
                  <th>{{ 'cart.label.quantity' | t }}</th>
                  <th>{{ 'cart.label.final_price' | t }}</th>
                </tr>
              </thead>
              <tbody>
                {% for line_items in cart.items %}
                  <tr>
                    <td>
                      <div class="item-content d-felx">
                        <div class="item-image p-2">
                          {% if line_items.image != empty %}
                            <img src="{{ line_items.image | image_url: width: 300}}" width="100px" height="auto">
                          {% endif %}
                        </div>
                        <div class="content">
                          <p class="title mb-1">{{ line_items.product.title | link_to: line_items.url }}</p>
                          <div class="price">
                            <span>{{ line_items.original_price | money_with_currency }}</span>
                          </div>
                          {% if line_items.product.has_only_default_variant == false
                            or line_items.properties.size != 0
                            or line_items.selling_plan_allocation != null
                          %}
                            {% if line_items.product.has_only_default_variant == false %}
                              <div class="item-options">
                                {% for option in line_items.options_with_values %}
                                  <span>{{ option.name | escape }} : {{ option.value }}</span> <br>
                                {% endfor %}
                              </div>
                            {% endif %}
                            {% if line_items.selling_plan_allocation %}
                              <div class="selling-plan">
                                <span>{{ 'cart.label.selling_plan' | t }}: {{ line_items.selling_plan_allocation.selling_plan.name }}</span>
                              </div>
                            {% endif %}
                          {% endif %}
                        </div>
                      </div>
                    </td>
                    <td>
                      <div class="price-wrapper">
                        {% if line_items.original_price != line_items.final_price %}
                          <del>{{ line_items.original_price | money }}</del><br>
                          <span class="sale-price">{{ line_items.final_price | money }}</span>
                        {% else %}
                          <span>{{ line_items.original_price | money_with_currency }}</span>
                        {% endif %}
                      </div>
                    </td>
                    <td>
                      <div class="quantity-area">
                        <div class="input-group mb-3" style="width: 200px;">
                          <div class="input-group-prepend">
                            <a
                              href="/cart/change?id={{ line_items.key }}&quantity={{ line_items.quantity | minus:1 }}"
                              class="nav-link input-group-text"
                              >-</a
                            >
                          </div>
                          <input
                            type="number"
                            class="form-control"
                            name="updates[]"
                            value="{{ line_items.quantity }}"
                            aria-label="{{ 'cart.label.quantity' | t }}"
                          >
                          <div class="input-group-append">
                            <a
                              href="/cart/change?id={{ line_items.key }}&quantity={{ line_items.quantity | plus:1 }}"
                              class="nav-link input-group-text"
                              >+</a
                            >
                          </div>
                        </div>
                      </div>
                    </td>
                    <td>
                      <div class="final-price-wrapper">
                        {% if line_items.original_line_price != line_items.final_line_price %}
                          <del>{{ line_items.original_line_price | money }}</del><br>
                          <span class="final-sale-price">{{ line_items.final_line_price | money }}</span>
                        {% else %}
                          <span>{{ line_items.original_line_price | money_with_currency }}</span>
                        {% endif %}
                      </div>
                    </td>
                  </tr>
                {% endfor %}
              </tbody>
            </table>
          </div>
        </div>
        <div class="col-md-3">
          <div class="checkout-card">
            <div class="card">
              <div class="card-body">
                <div class="card-info d-felx justify-content-between">
                  <strong>{{ 'cart.label.subtotal' | t }}:</strong>
                  <h4 class="cart-subtotal">{{ cart.total_price | money_with_currency }}</h4>
                </div>
                <hr class="my-3">
                <div class="cart-note">
                  <label>{{ 'cart.label.note' | t }}: </label>
                  <textarea class="form-control" name="note" placeholder="{{ 'cart.label.note' | t }}">{{ cart.note }}</textarea>
                </div>
                <div class="cart-actions">
                  <button type="submit" name="update" class="btn btn-primary w-100 my-2">{{ 'cart.general.update' | t }}</button>
                  <button type="submit" name="checkout" class="btn btn-secondary w-100 my-2">{{ 'cart.general.checkout' | t }}</button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </form>
  </div>
</div>

<!-- Wishlist Section -->
<div class="wishlist-section mb-4" id="wishlist-container">
  <div class="wishlist-heading p-4 mb-4">
    <div class="header bg-dark d-flex align-items-center justify-content-center">
      <h3 class="text-light">{{ 'wishlist.title' | t }}</h3>
    </div>
  </div>
  <div class="container my-4">
    <div class="row">
      <div class="col-12">
        <div class="card-table">
          <table class="table table-responsive" id="wishlist-table">
            <thead>
              <tr>
                <th>{{ 'cart.label.product_info' | t }}</th>
                <th>{{ 'cart.label.price' | t }}</th>
                <th>{{ 'wishlist.actions' | t }}</th>
              </tr>
            </thead>
            <tbody id="wishlist-items">
              <!-- Wishlist items will be dynamically inserted here -->
              <tr class="wishlist-empty">
                <td colspan="3" class="text-center py-5">
                  <p>{{ 'wishlist.empty' | t }}</p>
                  <a href="/collections/all" class="btn btn-primary" aria-label="{{ 'wishlist.browse_experiences_aria' | t }}">{{ 'wishlist.browse_experiences' | t }}</a>
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
</div>

<div class="compare-controls" style="display: none;">
  <button type="button" class="btn btn-primary" id="compare-selected-btn" disabled>
    {{ 'compare.selected' | t }} (<span id="compare-count">0</span>)
  </button>
</div>

<!-- Comparison Modal -->
<div class="modal fade modal-comparison" id="compareModal" tabindex="-1" role="dialog" aria-labelledby="compareModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="compareModalLabel">{{ 'compare.title' | t }}</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="{{ 'general.accessibility.close' | t }}">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body" id="comparison-content">
        <!-- Comparison content will be populated here -->
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">{{ 'general.accessibility.close' | t }}</button>
      </div>
    </div>
  </div>
</div>

<style>

  /* Reset some basic elements */
  .cart-page,
  .cart-page * {
    box-sizing: border-box;
  }

  /* Body font and background */
  .cart-page {
    font-family: var(--font-body-family);
    background-color: #f8f9fa;
    padding: 20px 0;
  }

  /* Container */
  .cart-page .container {
    max-width: 1200px;
    margin: 0 auto;
  }

  /* Heading Styles */
  .cart-page .cart-heading h3 {
    font-size: 2rem;
    font-weight: 700;
    margin: 0;
  }


  .cart-page .card-table {
    background-color: #fff;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
  }

  .cart-page table {
    width: 100%;
    border-collapse: collapse;
  }

  .cart-page th,
  .cart-page td {
    padding: 15px;
    text-align: left;
    vertical-align: middle;
    border-bottom: 1px solid #dee2e6;
  }

  .cart-page th {
    background-color: #f1f1f1;
    font-weight: 600;
    font-size: 1rem;
    color: #495057;
  }

  .cart-page tr:last-child td {
    border-bottom: none;
  }

  /* Product Info */
  .cart-page .item-content {
    display: flex;
    align-items: center;
  }

  .cart-page .item-image img {
    border-radius: 8px;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  .cart-page .item-image img:hover {
    transform: scale(1.05);
  }

  .cart-page .content {
    margin-left: 15px;
  }

  .cart-page .content .title {
    font-size: 1.1rem;
    font-weight: 600;
    margin-bottom: 5px;
    color: #343a40;
    text-decoration: none;
  }

  .cart-page .content .title:hover {
    text-decoration: underline;
  }

  .cart-page .content .price span {
    font-size: 1rem;
    color: #28a745;
  }

  .cart-page .item-options span {
    display: inline-block;
    font-size: 0.9rem;
    color: #6c757d;
  }

  .cart-page .selling-plan span {
    display: block;
    font-size: 0.85rem;
    color: #17a2b8;
    margin-top: 5px;
  }

  /* Price Wrapper */
  .cart-page .price-wrapper del {
    color: #dc3545;
    font-size: 0.9rem;
  }

  .cart-page .price-wrapper .sale-price {
    color: #28a745;
    font-weight: 600;
    font-size: 1rem;
  }

  .cart-page .price-wrapper span {
    font-size: 1rem;
    color: #343a40;
  }

  /* Quantity Area */
  .cart-page .quantity-area .input-group {
    display: flex;
    align-items: center;
  }

  .cart-page .quantity-area .input-group a {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 35px;
    height: 35px;
    background-color: #f1f1f1;
    color: #343a40;
    border-radius: 4px;
    text-decoration: none;
    font-size: 1.2rem;
    transition: background-color 0.3s ease, color 0.3s ease;
  }

  .cart-page .quantity-area .input-group a:hover {
    background-color: #343a40;
    color: #fff;
  }

  .cart-page .quantity-area .form-control {
    width: 60px;
    text-align: center;
    border: 1px solid #ced4da;
    border-radius: 4px;
    margin: 0 5px;
    font-size: 1rem;
  }

  .cart-page .quantity-area .form-control:focus {
    border-color: #0d6efd;
    outline: none;
    box-shadow: none;
  }

  /* Final Price Wrapper */
  .cart-page .final-price-wrapper del {
    color: #dc3545;
    font-size: 0.9rem;
  }

  .cart-page .final-price-wrapper .final-sale-price {
    color: #28a745;
    font-weight: 600;
    font-size: 1rem;
  }

  .cart-page .final-price-wrapper span {
    font-size: 1rem;
    color: #343a40;
  }

  /* =========================
     Checkout Card Styles
  ========================= */

  .cart-page .checkout-card .card {
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    overflow: hidden;
  }

  .cart-page .checkout-card .card-body {
    padding: 20px;
  }

  .cart-page .checkout-card .card-info {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
  }

  .cart-page .checkout-card .card-info strong {
    font-size: 1.1rem;
    color: #343a40;
  }

  .cart-page .checkout-card .cart-subtotal {
    font-size: 1.3rem;
    font-weight: 600;
    color: #28a745;
  }

  .cart-page .checkout-card hr {
    border: 0;
    height: 1px;
    background-color: #dee2e6;
    margin: 20px 0;
  }

  .cart-page .cart-note label {
    font-size: 1rem;
    color: #343a40;
  }

  .cart-page .cart-note textarea {
    width: 100%;
    height: 80px;
    padding: 10px;
    border: 1px solid #ced4da;
    border-radius: 4px;
    resize: vertical;
    font-size: 1rem;
    margin-top: 5px;
  }

  .cart-page .cart-note textarea:focus {
    border-color: #0d6efd;
    outline: none;
    box-shadow: none;
  }

  .cart-page .cart-actions button {
    padding: 12px 20px;
    font-size: 1rem;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }

  .cart-page .cart-actions .btn-primary {
    background-color: #0d6efd;
    color: #fff;
    margin-bottom: 10px;
  }

  .cart-page .cart-actions .btn-primary:hover {
    background-color: #0b5ed7;
  }

  .cart-page .cart-actions .btn-secondary {
    background-color: #6c757d;
    color: #fff;
  }

  .cart-page .cart-actions .btn-secondary:hover {
    background-color: #5a6268;
  }

  /* =========================
     Responsive Styles
  ========================= */

  @media (max-width: 992px) {
    .cart-page .container.my-6 {
      padding: 0 15px;
    }

    .cart-page .quantity-area .input-group {
      width: 100%;
    }

    .cart-page .quantity-area .input-group a {
      width: 30px;
      height: 30px;
      font-size: 1rem;
    }

    .cart-page .quantity-area .form-control {
      width: 50px;
      margin: 0 3px;
    }

    .cart-page .checkout-card {
      margin-top: 30px;
    }
  }

  @media (max-width: 768px) {
    .cart-page .card-table table,
    .cart-page .card-table thead,
    .cart-page .card-table tbody,
    .cart-page .card-table th,
    .cart-page .card-table td,
    .cart-page .card-table tr {
      display: block;
    }

    .cart-page .card-table thead tr {
      display: none;
    }

    .cart-page .card-table tr {
      margin-bottom: 15px;
      border: 1px solid #dee2e6;
      border-radius: 8px;
      padding: 10px;
    }

    .cart-page .card-table td {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 10px 5px;
      border: none;
      border-bottom: 1px solid #dee2e6;
    }

    .cart-page .card-table td:last-child {
      border-bottom: none;
    }

    .cart-page .checkout-card .card-body {
      padding: 15px;
    }

    .cart-page .checkout-card .cart-actions button {
      width: 100%;
      margin-bottom: 10px;
    }
  }

  @media (max-width: 576px) {
    .cart-page .cart-heading h3 {
      font-size: 1.5rem;
    }

    .cart-page .checkout-card .card-info strong,
    .cart-page .checkout-card .cart-subtotal {
      font-size: 1rem;
    }

    .cart-page .cart-note textarea {
      height: 60px;
    }
  }

  /* Wishlist Section Styles */
  .wishlist-section .card-table {
    background-color: #fff;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    margin-bottom: 30px;
  }

  .wishlist-section .wishlist-heading h3 {
    font-size: 2rem;
    font-weight: 700;
    margin: 0;
  }

  .wishlist-section .wishlist-actions {
    display: flex;
    flex-direction: column;
    gap: 10px;
  }

  .wishlist-section .wishlist-empty {
    background-color: #f8f9fa;
  }

  /* Toast Notification */
  #wishlist-toast {
    position: fixed;
    bottom: 30px;
    right: 30px;
    background-color: #333;
    color: #fff;
    padding: 12px 20px;
    border-radius: 4px;
    z-index: 1000;
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.3s, transform 0.3s;
  }

  #wishlist-toast.show {
    opacity: 1;
    transform: translateY(0);
  }

  .wishlist-section .item-content {
    align-items: center;
  }

  .wishlist-section .content {
    margin-left: 15px;
    display: flex;
    flex-direction: column;
    justify-content: center;
  }

  .wishlist-section .content .title {
    margin: 0;
    padding: 0;
    line-height: 1.2;
  }

  /* Comparison feature styles */
  .compare-checkbox {
    padding-top: 45px;
  }

  .comparison-table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
  }

  .comparison-table th {
    background-color: #f1f1f1;
    padding: 10px;
    text-align: left;
    font-weight: 600;
    border-bottom: 1px solid #dee2e6;
  }

  .comparison-table td {
    padding: 10px;
    border-bottom: 1px solid #dee2e6;
  }

  .comparison-table tr:last-child td {
    border-bottom: none;
  }

  .comparison-table .product-header {
    background-color: #e9ecef;
    text-align: center;
    font-weight: 600;
  }

  .comparison-table .product-image {
    text-align: center;
  }

  .comparison-table .product-image img {
    max-width: 100px;
    height: auto;
    margin: 10px 0;
  }

  .comparison-feature {
    font-weight: 600;
    background-color: #f8f9fa;
  }

  /* Add this to your CSS */
  .compare-checkbox {
    margin-right: 10px;
    display: flex;
    align-items: center;
  }

  .compare-checkbox input[type="checkbox"] {
    width: 18px;
    height: 18px;
    margin-right: 5px;
    cursor: pointer;
  }

  /* Make the Compare Controls more visible */
  .compare-controls {
    margin: 50px 0;
    padding: 10px;
    background-color: #f8f9fa;
    border-radius: 5px;
    text-align: center;
  }

  .compare-controls button {
    font-weight: bold;
  }

  /* Rich text styling in comparison */
  .rich-text-content {
    max-height: 200px;
    overflow-y: auto;
    padding: 5px;
  }

  .rich-text-content p {
    margin-bottom: 0.5rem;
  }

  .rich-text-content ul, 
  .rich-text-content ol {
    padding-left: 1.5rem;
    margin-bottom: 0.5rem;
  }

  .rich-text-content img {
    max-width: 100%;
    height: auto;
    margin: 0.5rem 0;
  }

  /* Enhanced modal backdrop for better focus */
  .modal-backdrop {
    opacity: 0.7 !important; /* Darker than Bootstrap default */
    backdrop-filter: blur(2px); /* Slight blur effect */
    transition: opacity 0.2s ease-in-out;
  }

  /* Ensure modal appears above the darkened backdrop */
  .modal {
    z-index: 1060;
  }

  /* Add a subtle entrance animation */
  .modal.fade .modal-dialog {
    transform: translateY(-20px);
    transition: transform 0.3s ease-out;
  }

  .modal.show .modal-dialog {
    transform: translateY(0);
  }

  /* Make the modal content stand out more */
  .modal-content {
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.3);
    border: none;
  }

  /* Optional: Add a subtle glow to the modal */
  .modal-comparison .modal-content {
    box-shadow: 0 8px 40px rgba(0, 0, 0, 0.4), 0 0 15px rgba(0, 105, 255, 0.1);
  }

  /* Focus animation for the comparison table */
  @keyframes highlightFocus {
    0% { box-shadow: 0 0 0 rgba(13, 110, 253, 0); }
    50% { box-shadow: 0 0 15px rgba(13, 110, 253, 0.4); }
    100% { box-shadow: 0 0 0 rgba(13, 110, 253, 0); }
  }

  .highlight-animation {
    animation: highlightFocus 1.5s ease-in-out;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    function loadWishlist() {
      const wishlistContainer = document.getElementById('wishlist-container');
      const wishlistItems = document.getElementById('wishlist-items');
      const emptyWishlistRow = document.querySelector('.wishlist-empty');
      
      const wishlist = JSON.parse(localStorage.getItem('tourWishlist') || '{}');
      const wishlistKeys = Object.keys(wishlist);
      
      if (wishlistKeys.length === 0) {
        emptyWishlistRow.style.display = 'table-row';
        return;
      }
      
      emptyWishlistRow.style.display = 'none';
      
      wishlistKeys.forEach(key => {
        const item = wishlist[key];
        const row = document.createElement('tr');
        row.className = 'wishlist-item';
        row.dataset.productId = item.id;
        
        row.innerHTML = `
          <td>
            <div class="item-content d-flex">
              <div class="compare-checkbox mr-2">
                <input type="checkbox" class="compare-select" data-product-id="${item.id}" id="compare-${item.id}">
                <label for="compare-${item.id}" class="mb-0"></label>
              </div>
              <div class="item-image p-2">
                ${item.image ? `<img src="${item.image}" width="100px" height="auto" alt="${item.title}">` : ''}
              </div>
              <div class="content">
                <a href="${item.url}" class="title">${item.title}</a>
              </div>
            </div>
          </td>
          <td>
            <div class="price-wrapper">
              <span>${item.price || '{{ "product.price.view_for_price" | t }}'}</span>
            </div>
          </td>
          <td>
            <div class="wishlist-actions">
              <button type="button" class="btn btn-sm btn-primary add-to-cart-btn" data-product-id="${item.id}">
                {{ 'wishlist.add_to_cart' | t }}
              </button>
              <button type="button" class="btn btn-sm btn-danger remove-from-wishlist-btn" data-product-id="${item.id}">
                {{ 'wishlist.remove' | t }}
              </button>
            </div>
          </td>
        `;
        
        wishlistItems.appendChild(row);
      });
      
      setupWishlistButtons();
      setupComparisonFeature();
    }
    
    function setupWishlistButtons() {
      document.querySelectorAll('.remove-from-wishlist-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          const productId = this.dataset.productId;
          removeFromWishlist(productId);
        });
      });
      
      document.querySelectorAll('.add-to-cart-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          const productId = this.dataset.productId;
          addToCart(productId);
        });
      });
    }
    
    function removeFromWishlist(productId) {
      const wishlist = JSON.parse(localStorage.getItem('tourWishlist') || '{}');
      
      delete wishlist[productId];
      
      localStorage.setItem('tourWishlist', JSON.stringify(wishlist));
      
      const row = document.querySelector(`.wishlist-item[data-product-id="${productId}"]`);
      if (row) {
        row.remove();
      }
      
      if (Object.keys(wishlist).length === 0) {
        document.querySelector('.wishlist-empty').style.display = 'table-row';
      }
      
      showToast('{{ "wishlist.removed" | t }}');
    }
    
    function addToCart(productId) {
      fetch('/cart/add.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          id: productId,
          quantity: 1
        })
      })
      .then(response => response.json())
      .then(data => {
        showToast('{{ "cart.general.added_to_cart" | t }}');
        
        window.location.reload();
      })
      .catch(error => {
        console.error('Error:', error);
        showToast('{{ "cart.general.error_adding" | t }}');
      });
    }
    
    function showToast(message) {
      let toast = document.getElementById('wishlist-toast');
      if (!toast) {
        toast = document.createElement('div');
        toast.id = 'wishlist-toast';
        document.body.appendChild(toast);
      }
      
      toast.textContent = message;
      toast.classList.add('show');
      
      setTimeout(() => {
        toast.classList.remove('show');
      }, 3000);
    }
    
    loadWishlist();
  });

  // Global variables for comparison
  let selectedForCompare = [];
  const compareControls = document.querySelector('.compare-controls');
  const compareBtn = document.getElementById('compare-selected-btn');
  const compareCountSpan = document.getElementById('compare-count');

  function setupComparisonFeature() {
    // Setup compare checkboxes
    document.querySelectorAll('.compare-select').forEach(checkbox => {
      checkbox.addEventListener('change', function() {
        const productId = this.dataset.productId;
        
        if (this.checked) {
          // Add to selected array if not already there
          if (!selectedForCompare.includes(productId)) {
            selectedForCompare.push(productId);
          }
        } else {
          // Remove from selected array
          const index = selectedForCompare.indexOf(productId);
          if (index > -1) {
            selectedForCompare.splice(index, 1);
          }
        }
        
        // Update UI
        updateCompareSelection();
      });
    });
    
    // Setup compare button
    compareBtn.addEventListener('click', function() {
      compareProducts(selectedForCompare);
    });
  }

  function updateCompareSelection() {
    const count = selectedForCompare.length;
    compareCountSpan.textContent = count;
    
    if (count > 0) {
      compareControls.style.display = 'block';
      compareBtn.disabled = count < 2;
    } else {
      compareControls.style.display = 'none';
    }
  }

  // Update the compareProducts function
  async function compareProducts(productIds) {
    if (productIds.length < 2) {
      showToast('{{ "compare.select_min" | t }}');
      return;
    }
    
    // Get products from local storage
    const wishlist = JSON.parse(localStorage.getItem('tourWishlist') || '{}');
    const productsToCompare = productIds.map(id => wishlist[id]).filter(Boolean);
    
    if (productsToCompare.length < 2) {
      showToast('Error retrieving product data');
      return;
    }
    
    // Create comparison HTML
    let comparisonHtml = `
      <div class="comparison-container">
        <table class="comparison-table">
          <thead>
            <tr>
              <th></th>
    `;
    
    // Add product headers
    productsToCompare.forEach(product => {
      comparisonHtml += `
        <th class="product-header">${product.title}</th>
      `;
    });
    
    comparisonHtml += `
            </tr>
            <tr>
              <td></td>
    `;
    
    // Add product images
    productsToCompare.forEach(product => {
      comparisonHtml += `
        <td class="product-image">
          ${product.image ? `<img src="${product.image}" alt="${product.title}">` : 'No image'}
        </td>
      `;
    });
    
    comparisonHtml += `
            </tr>
          </thead>
          <tbody>
            <tr>
              <td class="comparison-feature">Price</td>
    `;
    
    // Add prices
    productsToCompare.forEach(product => {
      comparisonHtml += `
        <td>${product.price || 'Contact for price'}</td>
      `;
    });
    
    // Try to fetch additional metafield data
    try {
      comparisonHtml += `
          </tr>
          <tr>
            <td class="comparison-feature">Destination</td>
      `;
      
      productsToCompare.forEach(product => {
        const destination = product.destination || 'Not specified';
        comparisonHtml += `<td>${destination}</td>`;
      });
      
      // Days Allowed
      comparisonHtml += `
          </tr>
          <tr>
            <td class="comparison-feature">Days</td>
      `;
      
      productsToCompare.forEach(product => {
        const days = product.days_allowed || 'Not specified';
        comparisonHtml += `<td>${days}</td>`;
      });
      
      // People Allowed
      comparisonHtml += `
          </tr>
          <tr>
            <td class="comparison-feature">People</td>
      `;
      
      productsToCompare.forEach(product => {
        const people = product.people_allowed || 'Not specified';
        comparisonHtml += `<td>${people}</td>`;
      });
      

      
    } catch (error) {
      console.error('Error fetching metafield data:', error);
    }
    
    comparisonHtml += `
          </tr>
        </tbody>
      </table>
      </div>
    `;
    
    // Show the comparison in modal - update this part
    document.getElementById('comparison-content').innerHTML = comparisonHtml;
    
    // Use Bootstrap 5 modal API
    const compareModal = new bootstrap.Modal(document.getElementById('compareModal'));
    compareModal.show();

    setTimeout(() => {
      document.querySelector('.comparison-table').classList.add('highlight-animation');
    }, 300);
  }

  // Save to wishlist
  wishlist[productId] = {
    // other fields...
  };
</script>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

{% schema %}
{
  "name": "Cart",
  "settings": []
}
{% endschema %}
